{"ast":null,"code":"import { computed, watch } from \"vue\";\nimport { i as isServer } from \"../../../utils/ssr-fd33979c.mjs\";\nimport { k as cssVariableName } from \"../utils-711878eb.mjs\";\nimport { g as generateUniqueId } from \"../../../utils/uuid-7d2e5892.mjs\";\nimport { a as addOrUpdateStyleElement } from \"../../../utils/dom-ddcff6c3.mjs\";\nimport { u as useColors } from \"../../../composables/useColors-b582f249.mjs\";\nconst generateCSSVariable = (key, value) => {\n  return `${cssVariableName(key)}: ${value};\n`;\n};\nconst createColorConfigPlugin = (app, config) => {\n  const {\n    colors: configColors,\n    getTextColor,\n    getColor,\n    currentPresetName,\n    applyPreset\n  } = useColors();\n  const renderCSSVariables = (colors = configColors) => {\n    if (!colors) {\n      return;\n    }\n    const colorNames = Object.keys(colors);\n    const renderedColors = colorNames.map(key => `${cssVariableName(key)}: ${colors[key]}`).join(\";\");\n    const renderedOnColors = colorNames.map(key => `${cssVariableName(`on-${key}`)}: ${getColor(getTextColor(colors[key]))}`).join(\";\");\n    return `${renderedColors};${renderedOnColors}`;\n  };\n  const renderCSSVariablesStyleContent = (colors = configColors) => {\n    const colorNames = Object.keys(colors);\n    let result = \":root {\\n\";\n    colorNames.forEach(key => {\n      result += generateCSSVariable(key, colors[key]);\n    });\n    colorNames.forEach(key => {\n      result += generateCSSVariable(`on-${key}`, getColor(getTextColor(colors[key])));\n    });\n    result += \"}\\n\";\n    return result;\n  };\n  const uniqueId = computed(generateUniqueId);\n  const updateColors = newValue => {\n    if (!newValue) {\n      return;\n    }\n    if (isServer()) {\n      return;\n    }\n    const styleContent = renderCSSVariablesStyleContent(newValue);\n    addOrUpdateStyleElement(`va-color-variables-${uniqueId.value}`, () => styleContent);\n  };\n  watch(configColors, newValue => {\n    updateColors(newValue);\n  }, {\n    immediate: true,\n    deep: true\n  });\n  return {\n    colors: configColors,\n    currentPresetName,\n    renderCSSVariables,\n    updateColors,\n    renderCSSVariablesStyleContent\n  };\n};\nexport { createColorConfigPlugin as c };","map":{"version":3,"names":["generateCSSVariable","key","value","cssVariableName","createColorConfigPlugin","app","config","colors","configColors","getTextColor","getColor","currentPresetName","applyPreset","useColors","renderCSSVariables","colorNames","Object","keys","renderedColors","map","join","renderedOnColors","renderCSSVariablesStyleContent","result","forEach","uniqueId","computed","generateUniqueId","updateColors","newValue","isServer","styleContent","addOrUpdateStyleElement","watch","immediate","deep"],"sources":["../../../../../../src/services/color/plugin/create-color-config-plugin.ts"],"sourcesContent":["import { PartialGlobalConfig } from './../../global-config/types'\nimport { ColorVariables } from './../types'\nimport { App, watch, computed } from 'vue'\nimport { isServer } from '../../../utils/ssr'\nimport { cssVariableName } from '../utils'\nimport { useColors } from '../../../composables'\nimport { generateUniqueId } from '../../../utils/uuid'\nimport { addOrUpdateStyleElement } from '../../../utils/dom'\n\nexport const setCSSVariable = (name: string, value: string, root: HTMLElement) => {\n  root.style.setProperty(cssVariableName(name), value)\n}\n\nexport const generateCSSVariable = (key: string, value: string) => {\n  return `${cssVariableName(key)}: ${value};\\n`\n}\n\nexport const createColorConfigPlugin = (app: App, config?: PartialGlobalConfig) => {\n  const { colors: configColors, getTextColor, getColor, currentPresetName, applyPreset } = useColors()\n\n  /** Renders CSS variables string. Use this in SSR mode */\n  const renderCSSVariables = (colors: ColorVariables | undefined = configColors) => {\n    if (!colors) { return }\n\n    const colorNames = Object.keys(colors)\n    const renderedColors = colorNames.map((key) => `${cssVariableName(key)}: ${colors[key]}`).join(';')\n    const renderedOnColors = colorNames.map((key) => `${cssVariableName(`on-${key}`)}: ${getColor(getTextColor(colors[key]))}`).join(';')\n\n    return `${renderedColors};${renderedOnColors}`\n  }\n\n  const renderCSSVariablesStyleContent = (colors: ColorVariables = configColors) => {\n    const colorNames = Object.keys(colors)\n\n    let result = ':root {\\n'\n    colorNames.forEach((key) => {\n      result += generateCSSVariable(key, colors[key])\n    })\n    colorNames.forEach((key) => {\n      result += generateCSSVariable(`on-${key}`, getColor(getTextColor(colors[key])))\n    })\n    result += '}\\n'\n\n    return result\n  }\n\n  const uniqueId = computed(generateUniqueId)\n\n  const updateColors = (newValue: ColorVariables | undefined) => {\n    if (!newValue) { return }\n    if (isServer()) { return }\n\n    const styleContent = renderCSSVariablesStyleContent(newValue)\n\n    addOrUpdateStyleElement(`va-color-variables-${uniqueId.value}`, () => styleContent)\n  }\n\n  watch(configColors, (newValue) => {\n    updateColors(newValue)\n  }, { immediate: true, deep: true })\n\n  return {\n    colors: configColors,\n    currentPresetName,\n    renderCSSVariables,\n    updateColors,\n    renderCSSVariablesStyleContent,\n  }\n}\n"],"mappings":";;;;;;AAaa,MAAAA,mBAAA,GAAsBA,CAACC,GAAA,EAAaC,KAAA,KAAkB;EAC1D,UAAGC,eAAA,CAAgBF,GAAG,MAAMC,KAAA;AAAA;AACrC;AAEa,MAAAE,uBAAA,GAA0BA,CAACC,GAAA,EAAUC,MAAA,KAAiC;EAC3E;IAAEC,MAAA,EAAQC,YAAA;IAAcC,YAAA;IAAcC,QAAA;IAAUC,iBAAA;IAAmBC;EAAA,IAAgBC,SAAA;EAGnF,MAAAC,kBAAA,GAAqBA,CAACP,MAAA,GAAqCC,YAAA,KAAiB;IAChF,IAAI,CAACD,MAAA,EAAQ;MAAE;IAAO;IAEhB,MAAAQ,UAAA,GAAaC,MAAA,CAAOC,IAAA,CAAKV,MAAM;IACrC,MAAMW,cAAA,GAAiBH,UAAA,CAAWI,GAAA,CAAKlB,GAAA,IAAQ,GAAGE,eAAA,CAAgBF,GAAG,MAAMM,MAAA,CAAON,GAAG,GAAG,EAAEmB,IAAA,CAAK,GAAG;IAClG,MAAMC,gBAAA,GAAmBN,UAAA,CAAWI,GAAA,CAAKlB,GAAA,IAAQ,GAAGE,eAAA,CAAgB,MAAMF,GAAA,EAAK,MAAMS,QAAA,CAASD,YAAA,CAAaF,MAAA,CAAON,GAAG,CAAC,CAAC,GAAG,EAAEmB,IAAA,CAAK,GAAG;IAEpI,OAAO,GAAGF,cAAA,IAAkBG,gBAAA;EAAA;EAGxB,MAAAC,8BAAA,GAAiCA,CAACf,MAAA,GAAyBC,YAAA,KAAiB;IAC1E,MAAAO,UAAA,GAAaC,MAAA,CAAOC,IAAA,CAAKV,MAAM;IAErC,IAAIgB,MAAA,GAAS;IACFR,UAAA,CAAAS,OAAA,CAASvB,GAAA,IAAQ;MAC1BsB,MAAA,IAAUvB,mBAAA,CAAoBC,GAAA,EAAKM,MAAA,CAAON,GAAG,CAAC;IAAA,CAC/C;IACUc,UAAA,CAAAS,OAAA,CAASvB,GAAA,IAAQ;MAChBsB,MAAA,IAAAvB,mBAAA,CAAoB,MAAMC,GAAA,IAAOS,QAAA,CAASD,YAAA,CAAaF,MAAA,CAAON,GAAG,CAAC,CAAC,CAAC;IAAA,CAC/E;IACSsB,MAAA;IAEH,OAAAA,MAAA;EAAA;EAGH,MAAAE,QAAA,GAAWC,QAAA,CAASC,gBAAgB;EAEpC,MAAAC,YAAA,GAAgBC,QAAA,IAAyC;IAC7D,IAAI,CAACA,QAAA,EAAU;MAAE;IAAO;IACxB,IAAIC,QAAA,IAAY;MAAE;IAAO;IAEnB,MAAAC,YAAA,GAAeT,8BAAA,CAA+BO,QAAQ;IAE5DG,uBAAA,CAAwB,sBAAsBP,QAAA,CAASvB,KAAA,IAAS,MAAM6B,YAAY;EAAA;EAG9EE,KAAA,CAAAzB,YAAA,EAAeqB,QAAA,IAAa;IAChCD,YAAA,CAAaC,QAAQ;EAAA,GACpB;IAAEK,SAAA,EAAW;IAAMC,IAAA,EAAM;EAAM;EAE3B;IACL5B,MAAA,EAAQC,YAAA;IACRG,iBAAA;IACAG,kBAAA;IACAc,YAAA;IACAN;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}