{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\n// import router from \"@/router\";\naxios.defaults.baseURL = \"http://127.0.0.1:8000/\";\n\n// const Axios = axios.create({\n//     baseURL:process.env.REACT_APP_API_ENDPOINT,\n//     headers: {},\n// });\n// const access = localStorage.getItem(\"access_token\");\n// axios.defaults.headers.common['Authorization'] = 'Bearer '+access\n\naxios.interceptors.request.use(config => {\n  console.log(config.headers.Authorization);\n  const access = localStorage.getItem('access_token');\n  if (access) config.headers.Authorization = 'Bearer ' + access;else router.push('/');\n  return config;\n});\naxios.interceptors.response.use(resp => {\n  return resp;\n}, async err => {\n  const originalConfig = err.config;\n  const refreshToken = localStorage.getItem(\"refresh_token\");\n  const data = {\n    refresh: refreshToken\n  };\n  try {\n    const response = await Axios.post('http://127.0.0.1:8000/api/v1/token/refresh/', data);\n    const accessToken = response.data.access;\n    localStorage.setItem(\"access_token\", accessToken);\n    return axios(originalConfig);\n  } catch (err) {\n    localStorage.clear();\n    router.push('/');\n  }\n});\n// return resp\n// },\n// // async(err)=>{\n// //     const originalConfig = err.config;\n// //     const refreshToken = localStorage.getItem(\"refresh_token\");\n// //     const data = { refresh: refreshToken };\n\n// //     try {\n// //       const response = await axios.post('http://127.0.0.1:8000/api/v1/token/refresh/',\n// //         data\n// //       );\n// //       const accessToken = response.data.access;\n// //       localStorage.setItem(\"access_token\", accessToken);\n// //       return axios(originalConfig);\n// //     } catch (err) {\n\n// //       localStorage.clear();\n// //       router.push('/')\n// //     }\n\n//     // (response) => response,\n//     // async (error) => {\n//     //     console.log(error)\n//     // const accessToken =  refreshAccessToken();\n//     //         axios.defaults.headers.common[\"Authorization\"] =\n//     //           \"Bearer \" + accessToken;\n//     //         return axios(response);\n\n// //   }\n\n// // export const accessToken = async () => {\n// // const access = localStorage.getItem(\"access_token\");\n\n// //     if(access)\n// //         axios.defaults.headers.common['Authorization'] = 'Bearer '+access\n// //     else\n// //         router.push('/')\n// // }\n\n// // export const refreshAccessToken = async () => {\n// //         const refreshToken = localStorage.getItem(\"refresh_token\");\n// //         const data = { refresh: refreshToken };\n\n// //         try {\n// //           const response = await axios.post('http://127.0.0.1:8000/api/v1/token/refresh/',\n// //             data\n// //           );\n// //           const accessToken = response.data.access;\n// //           localStorage.setItem(\"access_token\", accessToken);\n// //           return accessToken;\n// //         } catch (err) {\n\n// //           localStorage.clear();\n// //           router.push('/')\n// //         }\n// //       };\n\n// // axios.interceptors.request.use((req) => {\n\n// //     const token = localStorage.getItem('access_token');\n\n// //     if (token) {\n// //          req.defaults.headers.common['Authorization'] = 'Bearer '+token\n\n// //     }else{\n// //         router.push('/')\n// //     }\n\n// //   });\n\n// // axios.interceptors.response.use(\n// //     (response) => response,\n// //     async (error) => {\n// //       const originalRequest = error.config;\n\n// //     //  if (error.response === 401) {\n\n// //         const accessToken = await refreshAccessToken();\n// //         axios.defaults.headers.common[\"Authorization\"] =\n// //           \"Bearer \" + accessToken;\n// //         return axios(originalRequest);\n// //       } \n// //     //   else {\n// //     //     throw error;\n// //     //   }\n// //     // }\n// //   );\n// //   const refreshAccessToken = async () => {\n// //     const refreshToken = localStorage.getItem(\"refresh_token\");\n// //     const data = { refresh: refreshToken };\n\n// //     try {\n// //       const response = await axios.post('axios://127.0.0.1:8000/api/v1/token/refresh/',\n// //         data\n// //       );\n// //       const accessToken = response.data.access;\n// //       localStorage.setItem(\"access_token\", accessToken);\n// //       return accessToken;\n// //     } catch (err) {\n// //       if(err.response.status===401)\n// //       localStorage.clear();\n// //      window.location.replace(\"/unauthorized\");\n// //     }\n// //   };\n\nexport default axios;","map":{"version":3,"names":["axios","defaults","baseURL","interceptors","request","use","config","console","log","headers","Authorization","access","localStorage","getItem","router","push","response","resp","err","originalConfig","refreshToken","data","refresh","Axios","post","accessToken","setItem","clear"],"sources":["/home/festin.philip/first_project/src/components/axios.js"],"sourcesContent":["import axios from \"axios\";\n// import router from \"@/router\";\naxios.defaults.baseURL=\"http://127.0.0.1:8000/\"\n\n// const Axios = axios.create({\n//     baseURL:process.env.REACT_APP_API_ENDPOINT,\n//     headers: {},\n// });\n// const access = localStorage.getItem(\"access_token\");\n// axios.defaults.headers.common['Authorization'] = 'Bearer '+access\n\naxios.interceptors.request.use((config) => {\n    console.log(config.headers.Authorization)\n    const access = localStorage.getItem('access_token');\n\n\n        if(access)\n        config.headers.Authorization= 'Bearer '+access\n     else\n             router.push('/')\n    \n    return config\n  })\n  \n  axios.interceptors.response.use((resp) => {\nreturn(resp)},\nasync (err)=>{\n    const originalConfig = err.config;\n        const refreshToken = localStorage.getItem(\"refresh_token\");\n        const data = { refresh: refreshToken };\n      \n        try {\n          const response = await Axios.post('http://127.0.0.1:8000/api/v1/token/refresh/',\n            data\n          );\n          const accessToken = response.data.access;\n          localStorage.setItem(\"access_token\", accessToken);\n          return axios(originalConfig);\n        } catch (err) {\n         \n          localStorage.clear();\n          router.push('/')\n        }\n\n})\n// return resp\n// },\n// // async(err)=>{\n// //     const originalConfig = err.config;\n// //     const refreshToken = localStorage.getItem(\"refresh_token\");\n// //     const data = { refresh: refreshToken };\n  \n// //     try {\n// //       const response = await axios.post('http://127.0.0.1:8000/api/v1/token/refresh/',\n// //         data\n// //       );\n// //       const accessToken = response.data.access;\n// //       localStorage.setItem(\"access_token\", accessToken);\n// //       return axios(originalConfig);\n// //     } catch (err) {\n     \n// //       localStorage.clear();\n// //       router.push('/')\n// //     }\n\n\n\n//     // (response) => response,\n//     // async (error) => {\n//     //     console.log(error)\n//     // const accessToken =  refreshAccessToken();\n//     //         axios.defaults.headers.common[\"Authorization\"] =\n//     //           \"Bearer \" + accessToken;\n//     //         return axios(response);\n    \n\n// //   }\n \n  \n// // export const accessToken = async () => {\n// // const access = localStorage.getItem(\"access_token\");\n\n\n// //     if(access)\n// //         axios.defaults.headers.common['Authorization'] = 'Bearer '+access\n// //     else\n// //         router.push('/')\n// // }\n\n\n// // export const refreshAccessToken = async () => {\n// //         const refreshToken = localStorage.getItem(\"refresh_token\");\n// //         const data = { refresh: refreshToken };\n      \n// //         try {\n// //           const response = await axios.post('http://127.0.0.1:8000/api/v1/token/refresh/',\n// //             data\n// //           );\n// //           const accessToken = response.data.access;\n// //           localStorage.setItem(\"access_token\", accessToken);\n// //           return accessToken;\n// //         } catch (err) {\n         \n// //           localStorage.clear();\n// //           router.push('/')\n// //         }\n// //       };\n\n\n// // axios.interceptors.request.use((req) => {\n    \n// //     const token = localStorage.getItem('access_token');\n  \n// //     if (token) {\n// //          req.defaults.headers.common['Authorization'] = 'Bearer '+token\n\n// //     }else{\n// //         router.push('/')\n// //     }\n    \n    \n// //   });\n\n\n// // axios.interceptors.response.use(\n// //     (response) => response,\n// //     async (error) => {\n// //       const originalRequest = error.config;\n     \n// //     //  if (error.response === 401) {\n       \n// //         const accessToken = await refreshAccessToken();\n// //         axios.defaults.headers.common[\"Authorization\"] =\n// //           \"Bearer \" + accessToken;\n// //         return axios(originalRequest);\n// //       } \n// //     //   else {\n// //     //     throw error;\n// //     //   }\n// //     // }\n// //   );\n// //   const refreshAccessToken = async () => {\n// //     const refreshToken = localStorage.getItem(\"refresh_token\");\n// //     const data = { refresh: refreshToken };\n  \n// //     try {\n// //       const response = await axios.post('axios://127.0.0.1:8000/api/v1/token/refresh/',\n// //         data\n// //       );\n// //       const accessToken = response.data.access;\n// //       localStorage.setItem(\"access_token\", accessToken);\n// //       return accessToken;\n// //     } catch (err) {\n// //       if(err.response.status===401)\n// //       localStorage.clear();\n// //      window.location.replace(\"/unauthorized\");\n// //     }\n// //   };\n\n   export default axios;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACAA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAC,wBAAwB;;AAE/C;AACA;AACA;AACA;AACA;AACA;;AAEAF,KAAK,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvCC,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,OAAO,CAACC,aAAa,CAAC;EACzC,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAG/C,IAAGF,MAAM,EACTL,MAAM,CAACG,OAAO,CAACC,aAAa,GAAE,SAAS,GAACC,MAAM,MAEzCG,MAAM,CAACC,IAAI,CAAC,GAAG,CAAC;EAEzB,OAAOT,MAAM;AACf,CAAC,CAAC;AAEFN,KAAK,CAACG,YAAY,CAACa,QAAQ,CAACX,GAAG,CAAEY,IAAI,IAAK;EAC5C,OAAOA,IAAI;AAAC,CAAC,EACb,MAAOC,GAAG,IAAG;EACT,MAAMC,cAAc,GAAGD,GAAG,CAACZ,MAAM;EAC7B,MAAMc,YAAY,GAAGR,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;EAC1D,MAAMQ,IAAI,GAAG;IAAEC,OAAO,EAAEF;EAAa,CAAC;EAEtC,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAMO,KAAK,CAACC,IAAI,CAAC,6CAA6C,EAC7EH,IACF,CAAC;IACD,MAAMI,WAAW,GAAGT,QAAQ,CAACK,IAAI,CAACV,MAAM;IACxCC,YAAY,CAACc,OAAO,CAAC,cAAc,EAAED,WAAW,CAAC;IACjD,OAAOzB,KAAK,CAACmB,cAAc,CAAC;EAC9B,CAAC,CAAC,OAAOD,GAAG,EAAE;IAEZN,YAAY,CAACe,KAAK,CAAC,CAAC;IACpBb,MAAM,CAACC,IAAI,CAAC,GAAG,CAAC;EAClB;AAER,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEG,eAAef,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}