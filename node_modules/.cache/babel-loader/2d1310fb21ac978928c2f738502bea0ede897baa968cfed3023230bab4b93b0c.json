{"ast":null,"code":"const addEventListener = (target, ...args) => {\n  if (!target || typeof target !== \"object\") {\n    return;\n  }\n  if (\"addEventListener\" in target && typeof target.addEventListener === \"function\") {\n    target.addEventListener(...args);\n    return;\n  }\n  if (\"parentElement\" in target) {\n    addEventListener(target.parentElement, ...args);\n  }\n};\nconst removeEventListener = (target, ...args) => {\n  if (!target || typeof target !== \"object\") {\n    return;\n  }\n  if (\"removeEventListener\" in target && typeof target.removeEventListener === \"function\") {\n    target.removeEventListener(...args);\n    return;\n  }\n  if (\"parentElement\" in target) {\n    removeEventListener(target.parentElement, ...args);\n  }\n};\nexport { addEventListener as a, removeEventListener as r };","map":{"version":3,"names":["addEventListener","target","args","parentElement","removeEventListener"],"sources":["../../../../src/utils/add-event-listener.ts"],"sourcesContent":["/**\n * Add event listener to element if it is element\n * In case if it SVGElement, it will try to add event listener to parentElement\n * Otherwise it will do nothing\n */\nexport const addEventListener = (target: unknown, ...args: Parameters<HTMLElement['addEventListener']>) => {\n  if (!target || typeof target !== 'object') { return }\n\n  if ('addEventListener' in target && typeof target.addEventListener === 'function') {\n    target.addEventListener(...args)\n    return\n  }\n\n  if ('parentElement' in target) {\n    addEventListener(target.parentElement, ...args)\n  }\n}\n\n/**\n * Remove event listener to element if it is element\n * In case if it SVGElement, it will try to add event listener to parentElement\n * Otherwise it will do nothing\n */\nexport const removeEventListener = (target: unknown, ...args: Parameters<HTMLElement['addEventListener']>) => {\n  if (!target || typeof target !== 'object') { return }\n\n  if ('removeEventListener' in target && typeof target.removeEventListener === 'function') {\n    target.removeEventListener(...args)\n    return\n  }\n\n  if ('parentElement' in target) {\n    removeEventListener(target.parentElement, ...args)\n  }\n}\n"],"mappings":"AAKa,MAAAA,gBAAA,GAAmBA,CAACC,MAAA,KAAoBC,IAAA,KAAsD;EACzG,IAAI,CAACD,MAAA,IAAU,OAAOA,MAAA,KAAW,UAAU;IAAE;EAAO;EAEpD,IAAI,sBAAsBA,MAAA,IAAU,OAAOA,MAAA,CAAOD,gBAAA,KAAqB,YAAY;IAC1EC,MAAA,CAAAD,gBAAA,CAAiB,GAAGE,IAAI;IAC/B;EACF;EAEA,IAAI,mBAAmBD,MAAA,EAAQ;IACZD,gBAAA,CAAAC,MAAA,CAAOE,aAAA,EAAe,GAAGD,IAAI;EAChD;AACF;AAOa,MAAAE,mBAAA,GAAsBA,CAACH,MAAA,KAAoBC,IAAA,KAAsD;EAC5G,IAAI,CAACD,MAAA,IAAU,OAAOA,MAAA,KAAW,UAAU;IAAE;EAAO;EAEpD,IAAI,yBAAyBA,MAAA,IAAU,OAAOA,MAAA,CAAOG,mBAAA,KAAwB,YAAY;IAChFH,MAAA,CAAAG,mBAAA,CAAoB,GAAGF,IAAI;IAClC;EACF;EAEA,IAAI,mBAAmBD,MAAA,EAAQ;IACTG,mBAAA,CAAAH,MAAA,CAAOE,aAAA,EAAe,GAAGD,IAAI;EACnD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}