{"ast":null,"code":"import { defineComponent, shallowRef, computed, nextTick } from \"vue\";\nimport { o as omit } from \"../../../vendor-2b2dbafd.mjs\";\nimport { u as useTimeParser } from \"./hooks/time-text-parser-c4125ce5.mjs\";\nimport { u as useTimeFormatter } from \"./hooks/time-text-formatter-d801bbfb.mjs\";\nimport { _ as _VaTimePicker } from \"../va-time-picker/VaTimePicker-139fed59.mjs\";\nimport { V as VaInputWrapper } from \"../va-input-wrapper/index-66a85aff.mjs\";\nimport { V as VaIcon } from \"../va-icon/index-e46b09d5.mjs\";\nimport { V as VaDropdown } from \"../va-dropdown/index-2c2f593a.mjs\";\nimport { V as VaDropdownContent } from \"../va-dropdown/components/VaDropdownContent/index-d832340d.mjs\";\nimport { u as useLongPressKey } from \"../../composables/useLongPresKey-6fc93b1b.mjs\";\nimport { e as extractComponentProps } from \"../../utils/component-options/extract-component-options-6b96d215.mjs\";\nimport { a as useFocusEmits, u as useFocus } from \"../../composables/useFocus-1b4e6b2f.mjs\";\nimport { a as useValidationEmits, u as useValidationProps, b as useValidation } from \"../../composables/useValidation-d5e122b8.mjs\";\nimport { a as useClearableEmits, u as useClearableProps, b as useClearable } from \"../../composables/useClearable-90c7364f.mjs\";\nimport { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from \"../../composables/useStateful-78f75564.mjs\";\nimport { a as useDropdownableEmits, u as useDropdownableProps, b as useDropdownable } from \"../../composables/useDropdownable-af194a5a.mjs\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset-0dfbd395.mjs\";\nimport { f as filterComponentProps } from \"../../utils/component-options/filter-props-9727421a.mjs\";\nimport { u as useTranslation } from \"../../composables/useTranslation-0934900c.mjs\";\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper, [\"focused\", \"maxLength\", \"counterValue\"]);\nconst _sfc_main = defineComponent({\n  name: \"VaTimeInput\",\n  components: {\n    VaDropdown,\n    VaDropdownContent,\n    VaTimePicker: _VaTimePicker,\n    VaIcon,\n    VaInputWrapper\n  },\n  emits: [...useFocusEmits, ...useValidationEmits, ...useClearableEmits, ...useStatefulEmits, ...useDropdownableEmits, \"update:modelValue\"],\n  props: {\n    ...VaInputWrapperProps,\n    ...useDropdownableProps,\n    ...useComponentPresetProp,\n    ...useClearableProps,\n    ...extractComponentProps(_VaTimePicker),\n    ...useValidationProps,\n    ...useStatefulProps,\n    closeOnContentClick: {\n      type: Boolean,\n      default: false\n    },\n    offset: {\n      ...useDropdownableProps.offset,\n      default: () => [2, 0]\n    },\n    placement: {\n      ...useDropdownableProps.placement,\n      default: \"bottom-end\"\n    },\n    modelValue: {\n      type: Date,\n      default: void 0\n    },\n    clearValue: {\n      type: Date,\n      default: void 0\n    },\n    format: {\n      type: Function\n    },\n    parse: {\n      type: Function\n    },\n    manualInput: {\n      type: Boolean,\n      default: false\n    },\n    leftIcon: {\n      type: Boolean,\n      default: false\n    },\n    icon: {\n      type: String,\n      default: \"schedule\"\n    },\n    ariaLabel: {\n      type: String,\n      default: \"$t:selectedTime\"\n    },\n    ariaResetLabel: {\n      type: String,\n      default: \"$t:resetTime\"\n    },\n    ariaToggleDropdownLabel: {\n      type: String,\n      default: \"$t:toggleDropdown\"\n    }\n  },\n  inheritAttrs: false,\n  setup(props, {\n    emit,\n    slots,\n    attrs\n  }) {\n    const input = shallowRef();\n    const timePicker = shallowRef();\n    const {\n      isOpenSync,\n      dropdownProps\n    } = useDropdownable(props, emit, {\n      defaultCloseOnValueUpdate: computed(() => Array.isArray(props.view) && props.view.length === 1)\n    });\n    const {\n      valueComputed\n    } = useStateful(props, emit);\n    const {\n      parse,\n      isValid\n    } = useTimeParser(props);\n    const {\n      format\n    } = useTimeFormatter(props);\n    const valueText = computed(() => format(valueComputed.value || props.clearValue));\n    const doShowDropdown = computed({\n      get() {\n        if (props.disabled || props.readonly) {\n          return false;\n        }\n        return isOpenSync.value;\n      },\n      set(v) {\n        isOpenSync.value = v;\n        if (v) {\n          nextTick(() => {\n            var _a;\n            return (_a = timePicker.value) == null ? void 0 : _a.focus();\n          });\n        } else {\n          nextTick(() => {\n            var _a;\n            return (_a = input.value) == null ? void 0 : _a.focus();\n          });\n        }\n      }\n    });\n    const {\n      isFocused,\n      focus,\n      blur,\n      onFocus: focusListener,\n      onBlur: blurListener\n    } = useFocus(input);\n    const onInputTextChanged = e => {\n      var _a;\n      if (props.disabled) {\n        return;\n      }\n      const val = (_a = e.target) == null ? void 0 : _a.value;\n      if (!val) {\n        return reset();\n      }\n      const v = parse(val);\n      if (isValid.value && v) {\n        valueComputed.value = v;\n      } else {\n        valueComputed.value = void 0;\n        isValid.value = true;\n      }\n    };\n    const reset = () => withoutValidation(() => {\n      emit(\"update:modelValue\", props.clearValue);\n      emit(\"clear\");\n      resetValidation();\n    });\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners,\n      validationAriaAttributes,\n      withoutValidation,\n      resetValidation\n    } = useValidation(props, emit, {\n      reset,\n      focus,\n      value: valueComputed\n    });\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur\n    } = useClearable(props, valueText);\n    const canBeClearedComputed = computed(() => canBeCleared.value && valueText.value !== format(props.clearValue));\n    const filteredWrapperProps = filterComponentProps(VaInputWrapperProps);\n    const computedInputWrapperProps = computed(() => ({\n      ...filteredWrapperProps.value,\n      focused: isFocused.value,\n      error: computedError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput\n    }));\n    const viewToNumber = {\n      seconds: 1e3,\n      minutes: 1e3 * 60,\n      hours: 1e3 * 60 * 60\n    };\n    const onKeyPress = e => {\n      if (!(\"key\" in e)) {\n        return;\n      }\n      if (e.key === \"ArrowDown\") {\n        valueComputed.value = new Date(Number(valueComputed.value) - viewToNumber[props.view]);\n      }\n      if (e.key === \"ArrowUp\") {\n        valueComputed.value = new Date(Number(valueComputed.value) + viewToNumber[props.view]);\n      }\n      e.preventDefault();\n    };\n    useLongPressKey(input, {\n      onStart: onKeyPress,\n      onUpdate: onKeyPress\n    });\n    const computedInputListeners = {\n      focus: () => {\n        if (props.disabled) {\n          return;\n        }\n        focusListener();\n        if (props.readonly) {\n          return;\n        }\n        onFocus();\n        listeners.onFocus();\n      },\n      blur: () => {\n        if (props.disabled) {\n          return;\n        }\n        blurListener();\n        if (props.readonly) {\n          return;\n        }\n        onBlur();\n        listeners.onBlur();\n      }\n    };\n    const filteredSlots = computed(() => {\n      const slotsWithIcons = [props.leftIcon && \"prependInner\", (!props.leftIcon || props.clearable) && \"icon\"];\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot));\n    });\n    const hideDropdown = () => {\n      doShowDropdown.value = false;\n    };\n    const showDropdown = (event, cancel, prevent) => {\n      doShowDropdown.value = true;\n    };\n    const checkProhibitedDropdownOpening = e => {\n      if (isOpenSync.value) {\n        return false;\n      }\n      if (props.disabled || props.readonly) {\n        return true;\n      }\n      return props.manualInput && (e == null ? void 0 : e.code) !== \"Space\";\n    };\n    const toggleDropdown = event => {\n      if (checkProhibitedDropdownOpening(event instanceof KeyboardEvent ? event : void 0)) {\n        return;\n      }\n      doShowDropdown.value = !doShowDropdown.value;\n    };\n    const cursorStyleComputed = computed(() => {\n      if (props.disabled) {\n        return {};\n      }\n      if (props.manualInput) {\n        return {\n          cursor: \"text\"\n        };\n      }\n      return {\n        cursor: \"pointer\"\n      };\n    });\n    const iconTabindexComputed = computed(() => {\n      if (!props.manualInput) {\n        return -1;\n      }\n      return props.disabled || props.readonly ? -1 : 0;\n    });\n    const iconProps = computed(() => ({\n      role: \"button\",\n      \"aria-hidden\": false,\n      name: props.icon,\n      color: \"secondary\",\n      tabindex: iconTabindexComputed.value\n    }));\n    const {\n      tp\n    } = useTranslation();\n    const inputAttributesComputed = computed(() => ({\n      readonly: props.readonly || !props.manualInput,\n      disabled: props.disabled,\n      tabindex: props.disabled ? -1 : 0,\n      value: valueText.value,\n      \"aria-label\": props.label || tp(props.ariaLabel),\n      \"aria-required\": props.requiredMark,\n      \"aria-disabled\": props.disabled,\n      \"aria-readonly\": props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit(attrs, [\"class\", \"style\"])\n    }));\n    const dropdownPropsComputed = computed(() => ({\n      ...dropdownProps.value,\n      keyboardNavigation: true,\n      innerAnchorSelector: \".va-input-wrapper__field\",\n      trigger: \"none\"\n    }));\n    return {\n      tp,\n      input,\n      timePicker,\n      timePickerProps: filterComponentProps(extractComponentProps(_VaTimePicker)),\n      dropdownPropsComputed,\n      computedInputWrapperProps,\n      computedInputListeners,\n      isOpenSync,\n      doShowDropdown,\n      valueComputed,\n      valueText,\n      onInputTextChanged,\n      canBeClearedComputed,\n      iconProps,\n      clearIconProps,\n      filteredSlots,\n      inputAttributesComputed,\n      cursorStyleComputed,\n      hideDropdown,\n      showDropdown,\n      toggleDropdown,\n      reset,\n      focus,\n      blur\n    };\n  }\n});\nexport { _sfc_main as _ };","map":{"version":3,"names":["VaInputWrapperProps","extractComponentProps","VaInputWrapper","_sfc_main","defineComponent","name","components","VaDropdown","VaDropdownContent","VaTimePicker","_VaTimePicker","VaIcon","emits","useFocusEmits","useValidationEmits","useClearableEmits","useStatefulEmits","useDropdownableEmits","props","useDropdownableProps","useComponentPresetProp","useClearableProps","useValidationProps","useStatefulProps","closeOnContentClick","type","Boolean","default","offset","placement","modelValue","Date","clearValue","format","Function","parse","manualInput","leftIcon","icon","String","ariaLabel","ariaResetLabel","ariaToggleDropdownLabel","inheritAttrs","setup","emit","slots","attrs","input","shallowRef","timePicker","isOpenSync","dropdownProps","useDropdownable","defaultCloseOnValueUpdate","computed","Array","isArray","view","length","valueComputed","useStateful","isValid","useTimeParser","useTimeFormatter","valueText","value","doShowDropdown","get","disabled","readonly","set","v","nextTick","_a","focus","isFocused","blur","onFocus","focusListener","onBlur","blurListener","useFocus","onInputTextChanged","e","val","target","reset","withoutValidation","resetValidation","computedError","computedErrorMessages","listeners","validationAriaAttributes","useValidation","canBeCleared","clearIconProps","useClearable","canBeClearedComputed","filteredWrapperProps","filterComponentProps","computedInputWrapperProps","focused","error","errorMessages","viewToNumber","seconds","minutes","hours","onKeyPress","key","Number","preventDefault","useLongPressKey","onStart","onUpdate","computedInputListeners","filteredSlots","slotsWithIcons","clearable","Object","keys","filter","slot","includes","hideDropdown","showDropdown","event","cancel","prevent","checkProhibitedDropdownOpening","code","toggleDropdown","KeyboardEvent","cursorStyleComputed","cursor","iconTabindexComputed","iconProps","role","color","tabindex","tp","useTranslation","inputAttributesComputed","label","requiredMark","omit","dropdownPropsComputed","keyboardNavigation","innerAnchorSelector","trigger","timePickerProps"],"sources":["../../../../../src/components/va-time-input/VaTimeInput.vue"],"sourcesContent":["<template>\n  <va-dropdown\n    v-model=\"doShowDropdown\"\n    class=\"va-time-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-bind=\"dropdownPropsComputed\"\n  >\n    <template #anchor>\n      <va-input-wrapper\n        class=\"va-time-input__anchor\"\n        :style=\"cursorStyleComputed\"\n        v-bind=\"computedInputWrapperProps\"\n        @click.stop=\"toggleDropdown\"\n      >\n        <template #default>\n          <input\n            ref=\"input\"\n            class=\"va-time-input__input\"\n            v-bind=\"inputAttributesComputed\"\n            v-on=\"computedInputListeners\"\n            @change=\"onInputTextChanged\"\n          />\n        </template>\n\n        <template\n          v-for=\"name in filteredSlots\"\n          :key=\"name\"\n          v-slot:[name]=\"slotScope\"\n        >\n          <slot\n            :name=\"name\"\n            v-bind=\"{ ...slotScope, toggleDropdown, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n        </template>\n\n        <template #prependInner=\"slotScope\" v-if=\"$slots.prependInner || $props.leftIcon\">\n          <slot\n            name=\"prependInner\"\n            v-bind=\"{ ...slotScope, toggleDropdown, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n          <va-icon\n            v-if=\"$props.leftIcon\"\n            :aria-label=\"tp($props.ariaToggleDropdownLabel)\"\n            v-bind=\"iconProps\"\n            @click.stop=\"showDropdown\"\n            @keydown.enter.stop=\"showDropdown\"\n            @keydown.space.stop=\"showDropdown\"\n          />\n        </template>\n\n        <template #icon>\n          <va-icon\n            v-if=\"canBeClearedComputed\"\n            v-bind=\"{ ...iconProps, ...clearIconProps }\"\n            :aria-label=\"tp($props.ariaResetLabel)\"\n            @click.stop=\"reset\"\n            @keydown.enter.stop=\"reset\"\n            @keydown.space.stop=\"reset\"\n          />\n          <va-icon\n            v-if=\"!$props.leftIcon && $props.icon\"\n            :aria-label=\"tp($props.ariaToggleDropdownLabel)\"\n            @click.stop=\"showDropdown\"\n            @keydown.enter.stop=\"showDropdown\"\n            @keydown.space.stop=\"showDropdown\"\n            v-bind=\"iconProps\"\n          />\n        </template>\n      </va-input-wrapper>\n    </template>\n\n    <va-dropdown-content\n      no-padding\n      @keydown.esc.prevent=\"hideDropdown\"\n      @keydown.enter.prevent=\"hideDropdown\"\n    >\n      <va-time-picker\n        ref=\"timePicker\"\n        v-bind=\"timePickerProps\"\n        v-model=\"valueComputed\"\n      />\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, shallowRef, nextTick } from 'vue'\nimport omit from 'lodash/omit'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\nimport {\n  useComponentPresetProp,\n  useSyncProp,\n  useValidation, useValidationEmits, useValidationProps, ValidationProps,\n  useClearable, useClearableEmits, useClearableProps,\n  useFocus, useFocusEmits,\n  useStateful, useStatefulEmits, useStatefulProps,\n  useTranslation,\n  useDropdownable, useDropdownableProps, useDropdownableEmits, useLongPressKey,\n} from '../../composables'\nimport { useTimeParser } from './hooks/time-text-parser'\nimport { useTimeFormatter } from './hooks/time-text-formatter'\n\nimport VaTimePicker from '../va-time-picker/VaTimePicker.vue'\nimport { VaInputWrapper } from '../va-input-wrapper'\nimport { VaIcon } from '../va-icon'\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\n\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper, ['focused', 'maxLength', 'counterValue'])\n\nexport default defineComponent({\n  name: 'VaTimeInput',\n\n  components: { VaDropdown, VaDropdownContent, VaTimePicker, VaIcon, VaInputWrapper },\n\n  emits: [\n    ...useFocusEmits,\n    ...useValidationEmits,\n    ...useClearableEmits,\n    ...useStatefulEmits,\n    ...useDropdownableEmits,\n    'update:modelValue',\n  ],\n\n  props: {\n    ...VaInputWrapperProps,\n    ...useDropdownableProps,\n    ...useComponentPresetProp,\n    ...useClearableProps,\n    ...extractComponentProps(VaTimePicker),\n    ...useValidationProps as ValidationProps<Date>,\n    ...useStatefulProps,\n\n    closeOnContentClick: { type: Boolean, default: false },\n    offset: { ...useDropdownableProps.offset, default: () => [2, 0] },\n    placement: { ...useDropdownableProps.placement, default: 'bottom-end' },\n    modelValue: { type: Date, default: undefined },\n    clearValue: { type: Date, default: undefined },\n    format: { type: Function as PropType<(date?: Date) => string> },\n    parse: { type: Function as PropType<(input: string) => Date> },\n    manualInput: { type: Boolean, default: false },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'schedule' },\n\n    ariaLabel: { type: String, default: '$t:selectedTime' },\n    ariaResetLabel: { type: String, default: '$t:resetTime' },\n    ariaToggleDropdownLabel: { type: String, default: '$t:toggleDropdown' },\n  },\n\n  inheritAttrs: false,\n\n  setup (props, { emit, slots, attrs }) {\n    const input = shallowRef<HTMLInputElement>()\n    const timePicker = shallowRef<typeof VaTimePicker>()\n\n    const { isOpenSync, dropdownProps } = useDropdownable(props, emit, {\n      defaultCloseOnValueUpdate: computed(() => Array.isArray(props.view) && props.view.length === 1),\n    })\n    const { valueComputed } = useStateful(props, emit)\n\n    const { parse, isValid } = useTimeParser(props)\n    const { format } = useTimeFormatter(props)\n\n    const valueText = computed<string>(() => format(valueComputed.value || props.clearValue))\n\n    const doShowDropdown = computed({\n      get () {\n        if (props.disabled || props.readonly) { return false }\n\n        return isOpenSync.value\n      },\n      set (v: boolean) {\n        isOpenSync.value = v\n\n        if (v) {\n          nextTick(() => timePicker.value?.focus())\n        } else {\n          nextTick(() => input.value?.focus())\n        }\n      },\n    })\n\n    const { isFocused, focus, blur, onFocus: focusListener, onBlur: blurListener } = useFocus(input)\n\n    const onInputTextChanged = (e: Event) => {\n      if (props.disabled) { return }\n\n      const val = (e.target as HTMLInputElement)?.value\n      if (!val) {\n        return reset()\n      }\n\n      const v = parse(val)\n\n      if (isValid.value && v) {\n        valueComputed.value = v\n      } else {\n        valueComputed.value = undefined\n        isValid.value = true\n      }\n    }\n\n    // --- not used yet ---\n    // const changePeriod = (isPM: boolean) => {\n    //   if (!valueComputed.value) { return }\n\n    //   const halfDayPeriod = 12\n    //   const h = valueComputed.value.getHours()\n\n    //   if (isPM && h <= halfDayPeriod) {\n    //     valueComputed.value = new Date(valueComputed.value.setHours(h + halfDayPeriod))\n    //   } else if (!isPM && h >= halfDayPeriod) {\n    //     valueComputed.value = new Date(valueComputed.value.setHours(h - halfDayPeriod))\n    //   }\n    // }\n\n    // const changePeriodToPm = () => changePeriod(true)\n    // const changePeriodToAm = () => changePeriod(false)\n\n    const reset = () => withoutValidation(() => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n      resetValidation()\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners,\n      validationAriaAttributes,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus, value: valueComputed })\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueText)\n\n    const canBeClearedComputed = computed(() => (\n      canBeCleared.value && valueText.value !== format(props.clearValue)\n    ))\n\n    const filteredWrapperProps = filterComponentProps(VaInputWrapperProps)\n    const computedInputWrapperProps = computed(() => ({\n      ...filteredWrapperProps.value,\n      focused: isFocused.value,\n      error: computedError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput,\n    }))\n\n    const viewToNumber = {\n      seconds: 1000,\n      minutes: 1000 * 60,\n      hours: 1000 * 60 * 60,\n    }\n\n    const onKeyPress = (e: KeyboardEvent | FocusEvent) => {\n      if (!('key' in e)) { return }\n\n      if (e.key === 'ArrowDown') {\n        valueComputed.value = new Date(Number(valueComputed.value) - viewToNumber[props.view])\n      }\n      if (e.key === 'ArrowUp') {\n        valueComputed.value = new Date(Number(valueComputed.value) + viewToNumber[props.view])\n      }\n\n      e.preventDefault()\n    }\n\n    useLongPressKey(input, {\n      onStart: onKeyPress,\n      onUpdate: onKeyPress,\n    })\n\n    const computedInputListeners = ({\n      focus: () => {\n        if (props.disabled) { return }\n\n        focusListener()\n\n        if (props.readonly) { return }\n        onFocus()\n        listeners.onFocus()\n      },\n      blur: () => {\n        if (props.disabled) { return }\n\n        blurListener()\n\n        if (props.readonly) { return }\n        onBlur()\n        listeners.onBlur()\n      },\n    })\n\n    const filteredSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const hideDropdown = () => {\n      doShowDropdown.value = false\n    }\n\n    const showDropdown = (event?: KeyboardEvent, cancel?: boolean, prevent?: boolean) => {\n      doShowDropdown.value = true\n    }\n\n    const checkProhibitedDropdownOpening = (e?: KeyboardEvent) => {\n      if (isOpenSync.value) { return false }\n      if (props.disabled || props.readonly) { return true }\n      return props.manualInput && e?.code !== 'Space'\n    }\n\n    const toggleDropdown = (event: Event | KeyboardEvent) => {\n      if (checkProhibitedDropdownOpening(event instanceof KeyboardEvent ? event : undefined)) { return }\n\n      doShowDropdown.value = !doShowDropdown.value\n    }\n\n    const cursorStyleComputed = computed(() => {\n      if (props.disabled) { return {} }\n      if (props.manualInput) { return { cursor: 'text' } }\n      return { cursor: 'pointer' }\n    })\n\n    const iconTabindexComputed = computed(() => {\n      if (!props.manualInput) { return -1 }\n\n      return props.disabled || props.readonly ? -1 : 0\n    })\n\n    const iconProps = computed(() => ({\n      role: 'button',\n      'aria-hidden': false,\n      name: props.icon,\n      color: 'secondary',\n      tabindex: iconTabindexComputed.value,\n    }))\n\n    const { tp } = useTranslation()\n\n    const inputAttributesComputed = computed(() => ({\n      readonly: props.readonly || !props.manualInput,\n      disabled: props.disabled,\n      tabindex: props.disabled ? -1 : 0,\n      value: valueText.value,\n      'aria-label': props.label || tp(props.ariaLabel),\n      'aria-required': props.requiredMark,\n      'aria-disabled': props.disabled,\n      'aria-readonly': props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit(attrs, ['class', 'style']),\n    }))\n\n    const dropdownPropsComputed = computed(() => ({\n      ...dropdownProps.value,\n      keyboardNavigation: true,\n      innerAnchorSelector: '.va-input-wrapper__field',\n      trigger: 'none' as const,\n    }))\n\n    return {\n      tp,\n      input,\n      timePicker,\n\n      timePickerProps: filterComponentProps(extractComponentProps(VaTimePicker)),\n      dropdownPropsComputed,\n      computedInputWrapperProps,\n      computedInputListeners,\n      isOpenSync,\n      doShowDropdown,\n      valueComputed,\n      valueText,\n      onInputTextChanged,\n      canBeClearedComputed,\n      iconProps,\n      clearIconProps,\n      filteredSlots,\n      inputAttributesComputed,\n      cursorStyleComputed,\n\n      hideDropdown,\n      showDropdown,\n      toggleDropdown,\n\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}