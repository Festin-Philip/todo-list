{"ast":null,"code":"import { watch, unref } from \"vue\";\nimport { u as useWindow } from \"./useWindow-549880c7.mjs\";\nimport { u as unwrapEl } from \"../utils/unwrapEl-4d79d250.mjs\";\nimport { a as addEventListener, r as removeEventListener } from \"../utils/add-event-listener-b7ad20e7.mjs\";\nconst useEvent = (event, listener, target) => {\n  const source = target && typeof target !== \"boolean\" ? target : useWindow();\n  const capture = typeof target === \"boolean\" ? target : false;\n  watch(source, (newValue, oldValue) => {\n    if (!Array.isArray(event)) {\n      addEventListener(unwrapEl(unref(newValue)), event, listener, capture);\n      removeEventListener(unwrapEl(unref(oldValue)), event, listener, capture);\n    } else {\n      event.forEach(e => {\n        addEventListener(unwrapEl(unref(newValue)), e, listener, capture);\n        removeEventListener(unwrapEl(unref(oldValue)), e, listener, capture);\n      });\n    }\n  }, {\n    immediate: true\n  });\n};\nexport { useEvent as u };","map":{"version":3,"names":["useEvent","event","listener","target","source","useWindow","capture","watch","newValue","oldValue","Array","isArray","addEventListener","unwrapEl","unref","removeEventListener","forEach","e","immediate"],"sources":["../../../../src/composables/useEvent.ts"],"sourcesContent":["import { Component, Ref, unref, watch } from 'vue'\nimport { useWindow } from './useWindow'\nimport { unwrapEl } from '../utils/unwrapEl'\nimport { addEventListener, removeEventListener } from '../utils/add-event-listener'\n\ntype MaybeRef<T> = Ref<T> | T\n\ntype UseEventEventName = keyof GlobalEventHandlersEventMap | string[]\ntype UseEventEvent<N extends UseEventEventName, D> = N extends keyof GlobalEventHandlersEventMap ? GlobalEventHandlersEventMap[N] : D\n\n/**\n * SSR safety listen to target event.\n * @param target by default window\n * @param event if string, listener will be fully typed. If array of string, you need to type event manually.\n *\n *\n * @example\n * ```ts\n * useEvent('resize': (e) => {})\n * useEvent(['mousedown', 'mouseup', 'mousemove'], (e) => {})\n * ```\n */\nexport const useEvent = <N extends UseEventEventName, E extends Event>(\n  event: N,\n  listener: (this: GlobalEventHandlers, event: UseEventEvent<N, E>) => any,\n  target?: MaybeRef<unknown> | boolean,\n) => {\n  const source = (target && typeof target !== 'boolean') ? target : useWindow()\n  const capture = typeof target === 'boolean' ? target : false\n\n  watch(source, (newValue, oldValue) => {\n    if (!Array.isArray(event)) {\n      addEventListener(unwrapEl(unref(newValue)), event, listener as any, capture)\n      removeEventListener(unwrapEl(unref(oldValue)), event, listener as any, capture)\n    } else {\n      event.forEach((e) => {\n        addEventListener(unwrapEl(unref(newValue)), e, listener as any, capture)\n        removeEventListener(unwrapEl(unref(oldValue)), e, listener as any, capture)\n      })\n    }\n  }, { immediate: true })\n}\n"],"mappings":";;;;AAsBO,MAAMA,QAAA,GAAWA,CACtBC,KAAA,EACAC,QAAA,EACAC,MAAA,KACG;EACH,MAAMC,MAAA,GAAUD,MAAA,IAAU,OAAOA,MAAA,KAAW,YAAaA,MAAA,GAASE,SAAA;EAClE,MAAMC,OAAA,GAAU,OAAOH,MAAA,KAAW,YAAYA,MAAA,GAAS;EAEjDI,KAAA,CAAAH,MAAA,EAAQ,CAACI,QAAA,EAAUC,QAAA,KAAa;IACpC,IAAI,CAACC,KAAA,CAAMC,OAAA,CAAQV,KAAK,GAAG;MACzBW,gBAAA,CAAiBC,QAAA,CAASC,KAAA,CAAMN,QAAQ,CAAC,GAAGP,KAAA,EAAOC,QAAA,EAAiBI,OAAO;MAC3ES,mBAAA,CAAoBF,QAAA,CAASC,KAAA,CAAML,QAAQ,CAAC,GAAGR,KAAA,EAAOC,QAAA,EAAiBI,OAAO;IAAA,OACzE;MACCL,KAAA,CAAAe,OAAA,CAASC,CAAA,IAAM;QACnBL,gBAAA,CAAiBC,QAAA,CAASC,KAAA,CAAMN,QAAQ,CAAC,GAAGS,CAAA,EAAGf,QAAA,EAAiBI,OAAO;QACvES,mBAAA,CAAoBF,QAAA,CAASC,KAAA,CAAML,QAAQ,CAAC,GAAGQ,CAAA,EAAGf,QAAA,EAAiBI,OAAO;MAAA,CAC3E;IACH;EAAA,GACC;IAAEY,SAAA,EAAW;EAAA,CAAM;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}