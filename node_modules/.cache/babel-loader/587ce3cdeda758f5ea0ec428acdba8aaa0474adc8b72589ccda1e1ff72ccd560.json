{"ast":null,"code":"import { unref } from \"vue\";\nimport { u as useEvent } from \"./useEvent-0856a587.mjs\";\nimport { u as useHTMLElement } from \"./useHTMLElement-af551f75.mjs\";\nfunction useLongPressKey(el, options) {\n  let timeoutId = -1;\n  let intervalId = -1;\n  const handleMouseDown = e => {\n    var _a;\n    (_a = options.onStart) == null ? void 0 : _a.call(options, e);\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      intervalId = setInterval(() => {\n        var _a2;\n        return (_a2 = options.onUpdate) == null ? void 0 : _a2.call(options, e);\n      }, options.interval || 100);\n    }, unref(options.delay) || 500);\n  };\n  const handleMouseUp = e => {\n    var _a;\n    clearTimeout(timeoutId);\n    clearInterval(intervalId);\n    (_a = options.onEnd) == null ? void 0 : _a.call(options, e);\n  };\n  const htmlElement = useHTMLElement(el);\n  useEvent([\"keydown\"], handleMouseDown, htmlElement);\n  useEvent([\"keyup\", \"blur\"], handleMouseUp, true);\n}\nexport { useLongPressKey as u };","map":{"version":3,"names":["useLongPressKey","el","options","timeoutId","intervalId","handleMouseDown","e","_a","onStart","call","clearTimeout","setTimeout","setInterval","_a2","onUpdate","interval","unref","delay","handleMouseUp","clearInterval","onEnd","htmlElement","useHTMLElement","useEvent"],"sources":["../../../../src/composables/useLongPresKey.ts"],"sourcesContent":["import { Ref, ShallowRef, unref } from 'vue'\nimport { useEvent } from './useEvent'\nimport { MaybeElement, useHTMLElement } from '.'\n\ntype MaybeRef<T> = Ref<T> | T\n\ninterface LongPressOptions {\n  onStart: (ev: KeyboardEvent) => void;\n  onEnd: (ev: KeyboardEvent) => void;\n  onUpdate: (ev: KeyboardEvent | FocusEvent) => void;\n  delay?: MaybeRef<number>;\n  interval?: number;\n}\n\nexport function useLongPressKey (el: ShallowRef<HTMLElement | undefined>, options: Partial<LongPressOptions>) {\n  let timeoutId = -1\n  let intervalId = -1\n\n  const handleMouseDown = (e: KeyboardEvent) => {\n    options.onStart?.(e)\n    clearTimeout(timeoutId)\n    timeoutId = setTimeout(() => {\n      intervalId = setInterval(() => options.onUpdate?.(e), options.interval || 100) as any\n    }, unref(options.delay) || 500) as unknown as number\n  }\n\n  const handleMouseUp = (e: KeyboardEvent) => {\n    clearTimeout(timeoutId)\n    clearInterval(intervalId)\n    options.onEnd?.(e)\n  }\n\n  const htmlElement = useHTMLElement(el)\n\n  useEvent(['keydown'], handleMouseDown, htmlElement)\n  useEvent([\n    'keyup', 'blur',\n  ], handleMouseUp, true)\n}\n"],"mappings":";;;AAcgB,SAAAA,gBAAiBC,EAAA,EAAyCC,OAAA,EAAoC;EAC5G,IAAIC,SAAA,GAAY;EAChB,IAAIC,UAAA,GAAa;EAEX,MAAAC,eAAA,GAAmBC,CAAA,IAAqB;;IAC5C,CAAAC,EAAA,GAAAL,OAAA,CAAQM,OAAA,KAAR,gBAAAD,EAAA,CAAAE,IAAA,CAAAP,OAAA,EAAkBI,CAAA;IAClBI,YAAA,CAAaP,SAAS;IACtBA,SAAA,GAAYQ,UAAA,CAAW,MAAM;MACdP,UAAA,GAAAQ,WAAA,CAAY,MAAM;;QAAA,QAAAC,GAAA,GAAAX,OAAA,CAAQY,QAAA,KAAR,gBAAAD,GAAA,CAAAJ,IAAA,CAAAP,OAAA,EAAmBI,CAAA;MAAA,GAAIJ,OAAA,CAAQa,QAAA,IAAY,GAAG;IAC5E,GAAAC,KAAA,CAAMd,OAAA,CAAQe,KAAK,KAAK,GAAG;EAAA;EAG1B,MAAAC,aAAA,GAAiBZ,CAAA,IAAqB;;IAC1CI,YAAA,CAAaP,SAAS;IACtBgB,aAAA,CAAcf,UAAU;IACxB,CAAAG,EAAA,GAAAL,OAAA,CAAQkB,KAAA,KAAR,gBAAAb,EAAA,CAAAE,IAAA,CAAAP,OAAA,EAAgBI,CAAA;EAAC;EAGb,MAAAe,WAAA,GAAcC,cAAA,CAAerB,EAAE;EAErCsB,QAAA,CAAS,CAAC,SAAS,GAAGlB,eAAA,EAAiBgB,WAAW;EACzCE,QAAA,EACP,SAAS,SACRL,aAAA,EAAe,IAAI;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}