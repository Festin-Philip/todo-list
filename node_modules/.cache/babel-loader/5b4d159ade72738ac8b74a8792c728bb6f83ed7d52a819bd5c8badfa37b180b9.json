{"ast":null,"code":"import { getCurrentInstance } from \"vue\";\nimport { i as isDev } from \"../utils/env-da4fbb25.mjs\";\nimport { w as warn } from \"../utils/console-33a7ea8d.mjs\";\nconst useDeprecatedCondition = validators => {\n  if (!isDev) {\n    return void 0;\n  }\n  const instance = getCurrentInstance();\n  if (!instance) {\n    throw new Error(\"`useDeprecated` hook must be used only inside of setup function!\");\n  }\n  validators.forEach(validator => {\n    const message = validator();\n    if (typeof message === \"string\") {\n      warn(`(${instance.type.name} component) ${message}`);\n    }\n  });\n};\nexport { useDeprecatedCondition as u };","map":{"version":3,"names":["useDeprecatedCondition","validators","isDev","instance","getCurrentInstance","Error","forEach","validator","message","warn","type","name"],"sources":["../../../../src/composables/useDeprecatedCondition.ts"],"sourcesContent":["import { unref, Ref, getCurrentInstance } from 'vue'\n\nimport { isDev } from '../utils/env'\nimport { warn } from '../utils/console'\n\ntype DeprecationSource = 'slots' | 'props' | 'attrs'\n\nconst OPTIONS_LIST: Record<DeprecationSource, string> = {\n  props: 'prop',\n  attrs: 'prop',\n  slots: 'slot',\n}\n\nexport const useDeprecatedCondition = (\n  validators: (() => string | boolean | undefined)[],\n) => {\n  if (!isDev) { return undefined }\n\n  const instance = getCurrentInstance()\n\n  if (!instance) {\n    throw new Error('`useDeprecated` hook must be used only inside of setup function!')\n  }\n\n  validators.forEach((validator) => {\n    const message = validator()\n\n    if (typeof message === 'string') {\n      warn(`(${instance.type.name} component) ${message}`)\n    }\n  })\n}\n"],"mappings":";;;AAaa,MAAAA,sBAAA,GACXC,UAAA,IACG;EACH,IAAI,CAACC,KAAA,EAAO;IAAS;EAAU;EAE/B,MAAMC,QAAA,GAAWC,kBAAA;EAEjB,IAAI,CAACD,QAAA,EAAU;IACP,UAAIE,KAAA,CAAM,kEAAkE;EACpF;EAEWJ,UAAA,CAAAK,OAAA,CAASC,SAAA,IAAc;IAChC,MAAMC,OAAA,GAAUD,SAAA;IAEZ,WAAOC,OAAA,KAAY,UAAU;MAC/BC,IAAA,CAAK,IAAIN,QAAA,CAASO,IAAA,CAAKC,IAAA,eAAmBH,OAAA,EAAS;IACrD;EAAA,CACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}