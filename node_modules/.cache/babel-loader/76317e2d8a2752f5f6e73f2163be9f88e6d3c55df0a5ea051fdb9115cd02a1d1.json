{"ast":null,"code":"import { _ as _sfc_main } from \"./VaAvatarGroup.vue_vue_type_script_lang-6536cc5b.mjs\";\nimport { resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, mergeProps, renderSlot, normalizeProps, guardReactiveProps, createVNode, withCtx, createTextVNode, toDisplayString } from \"vue\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nconst VaAvatarGroup_vue_vue_type_style_index_0_lang = \"\";\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_avatar = resolveComponent(\"va-avatar\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"va-avatar-group\", _ctx.classComputed]),\n    role: \"group\"\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.maxOptions, (option, idx) => {\n    return openBlock(), createBlock(_component_va_avatar, mergeProps({\n      key: idx\n    }, {\n      ..._ctx.avatarProps,\n      ...option\n    }, {\n      role: \"listitem\"\n    }), null, 16);\n  }), 128)), renderSlot(_ctx.$slots, \"rest\", normalizeProps(guardReactiveProps(_ctx.avatarProps)), () => [createVNode(_component_va_avatar, mergeProps(_ctx.avatarProps, {\n    color: _ctx.restColor,\n    class: \"va-avatar-group__rest\",\n    role: \"listitem\"\n  }), {\n    default: withCtx(() => [createTextVNode(\" +\" + toDisplayString(_ctx.restOptionsCount), 1)]),\n    _: 1\n  }, 16, [\"color\"])])], 2);\n}\nconst _VaAvatarGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { _VaAvatarGroup as _ };\nimport '../../../VaAvatarGroup.css';","map":{"version":3,"names":["resolveComponent","openBlock","createElementBlock","class","normalizeClass","_ctx","classComputed","role","createBlock","_component_va_avatar","mergeProps","key","idx","avatarProps","option","renderSlot","$slots","normalizeProps","guardReactiveProps","createVNode","color","restColor"],"sources":["../../../../../src/components/va-avatar-group/VaAvatarGroup.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-avatar-group\"\n    :class=\"classComputed\"\n    role=\"group\"\n  >\n    <va-avatar\n      v-for=\"(option, idx) in maxOptions\"\n      :key=\"idx\"\n      v-bind=\"{ ...avatarProps, ...option }\"\n      role=\"listitem\"\n    />\n    <slot name=\"rest\" v-bind=\"avatarProps\">\n      <va-avatar\n        v-bind=\"avatarProps\"\n        :color=\"restColor\"\n        class=\"va-avatar-group__rest\"\n        role=\"listitem\"\n      >\n        +{{ restOptionsCount }}\n      </va-avatar>\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType } from 'vue'\n\nimport { VaAvatar } from '../va-avatar'\n\nimport pick from 'lodash/pick.js'\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\nimport { useBem, useComponentPresetProp, useSize, useSizeProps } from '../../composables'\n\nconst VaAvatarProps = extractComponentProps(VaAvatar)\n\nexport default defineComponent({\n  name: 'VaAvatarGroup',\n\n  components: {\n    VaAvatar,\n  },\n\n  props: {\n    ...useSizeProps,\n    ...useComponentPresetProp,\n    ...VaAvatarProps,\n\n    max: {\n      type: Number,\n      default: undefined,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n    options: {\n      type: Array as PropType<Record<string, unknown>[]>,\n      default: () => [],\n    },\n    /** If there are more avatars that can be displayed we show rest number. This prop changes color of rest indicator. */\n    restColor: {\n      type: String,\n      default: 'secondary',\n    },\n  },\n\n  setup (props) {\n    const classComputed = useBem('va-avatar-group', () => ({\n      ...pick(props, ['vertical']),\n    }))\n\n    const maxOptions = computed(() => props.options.slice(0, props.max))\n    const visibleItemsCount = computed(() => props.max ? props.max + 1 : 1)\n    const restOptionsCount = computed(() => props.options.length - (props.max || 0))\n    const { sizeComputed, fontSizeComputed } = useSize(props, 'VaAvatarGroup')\n\n    const filteredAvatarProps = filterComponentProps(VaAvatarProps)\n    const avatarProps = computed(() => ({\n      ...filteredAvatarProps.value,\n      fontSize: fontSizeComputed.value,\n      size: sizeComputed.value,\n    }))\n\n    return {\n      classComputed,\n      maxOptions,\n      visibleItemsCount,\n      restOptionsCount,\n      avatarProps,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-avatar-group {\n  display: flex;\n  flex-wrap: nowrap;\n\n  .va-avatar + .va-avatar {\n    margin-left: var(--va-avatar-group-gap);\n  }\n\n  &--vertical {\n    flex-direction: column;\n\n    .va-avatar + .va-avatar {\n      margin-left: 0;\n      margin-top: var(--va-avatar-group-gap);\n    }\n  }\n}\n</style>\n"],"mappings":";;;;;+BACEA,gBAAA,CAqBM;SAlBCC,SAAA,CAAO,GAAAC,kBAAA;IAAAC,KAAA,EAAAC,cAAA,qBAAAC,IAAA,CAAAC,aAAA;IAAAC,IAAA;;IAiBL,OAAAN,SAAA,IAAAO,WAAA,CAAAC,oBAAA,EAAAC,UAAA,CATmB;MAAAC,GAAA,EAAAC;IAAA,GAAW;MAS9B,GAAAP,IAAA,CAAAQ,WAAA;MAAA,GAAAC;IAAA;MAAAP,IAAA;IAAA;EARL,WAAAQ,UAAA,CAEUV,IAAA,CAASW,MAAA,UAAAC,cAAA,CAAAC,kBAAA,CAAAb,IAAA,CAAAQ,WAAA,WAAAM,WAAA,CACXV,oBAAA,EAAuBC,UAAA,CAAAL,IAAA,CAAAQ,WAAA;IAC7BO,KAAA,EAAKf,IAAA,CAAAgB,SAAA;IAAAlB,KAAA;IAAAI,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}