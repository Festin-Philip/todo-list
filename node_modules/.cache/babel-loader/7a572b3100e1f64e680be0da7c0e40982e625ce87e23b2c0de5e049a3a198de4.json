{"ast":null,"code":"import { defineComponent, shallowRef, ref, watch, computed } from \"vue\";\nimport { V as VaStepperControls } from \"./VaStepperControls-6011a784.mjs\";\nimport { V as VaStepperStepButton } from \"./VaStepperStepButton-927b4b00.mjs\";\nimport { u as unFunction } from \"../../utils/un-function-8f1b5d47.mjs\";\nimport { a as useStatefulProps, b as useStateful } from \"../../composables/useStateful-78f75564.mjs\";\nimport { u as useColors } from \"../../composables/useColors-b582f249.mjs\";\nimport { u as useTranslation } from \"../../composables/useTranslation-0934900c.mjs\";\nconst _sfc_main = defineComponent({\n  name: \"VaStepper\",\n  components: {\n    VaStepperControls,\n    VaStepperStepButton\n  },\n  props: {\n    ...useStatefulProps,\n    modelValue: {\n      type: Number,\n      default: 0\n    },\n    steps: {\n      type: Array,\n      default: () => [],\n      required: true\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    navigationDisabled: {\n      type: Boolean,\n      default: false\n    },\n    controlsHidden: {\n      type: Boolean,\n      default: false\n    },\n    nextDisabled: {\n      type: Boolean,\n      default: false\n    },\n    finishButtonHidden: {\n      type: Boolean,\n      default: false\n    },\n    ariaLabel: {\n      type: String,\n      default: \"$t:progress\"\n    },\n    linear: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"update:modelValue\", \"finish\", \"update:steps\"],\n  setup(props, {\n    emit\n  }) {\n    const stepperNavigation = shallowRef();\n    const {\n      valueComputed: modelValue\n    } = useStateful(props, emit, \"modelValue\", {\n      defaultValue: 0\n    });\n    const focusedStep = ref({\n      trigger: false,\n      stepIndex: props.navigationDisabled ? -1 : props.modelValue\n    });\n    const {\n      getColor\n    } = useColors();\n    const isNextStepDisabled = index => props.nextDisabled && index > modelValue.value;\n    const findFirstNonDisabled = (from, direction) => {\n      while (from >= 0 && from < props.steps.length) {\n        from += direction;\n        const step = props.steps[from];\n        if (!step) {\n          return;\n        }\n        if (!step.disabled) {\n          return step;\n        }\n      }\n    };\n    const findFirstWithErrorIndex = (from, direction) => {\n      while (from >= 0 && from < props.steps.length) {\n        from += direction;\n        const step = props.steps[from];\n        if (!step) {\n          return;\n        }\n        if (step.hasError === true) {\n          return from;\n        }\n      }\n    };\n    const validateMovingToStep = stepIndex => {\n      var _a;\n      const newStep = props.steps[stepIndex];\n      const currentStep = props.steps[modelValue.value];\n      const beforeNewStep = findFirstNonDisabled(stepIndex, -1);\n      if (newStep.disabled) {\n        return false;\n      }\n      if (props.linear && stepIndex < modelValue.value) {\n        return true;\n      }\n      const nextNonError = findFirstWithErrorIndex(modelValue.value, 1);\n      if (props.linear && nextNonError !== void 0 && nextNonError < stepIndex) {\n        return false;\n      }\n      if (((_a = currentStep.beforeLeave) == null ? void 0 : _a.call(currentStep, currentStep, newStep)) === false) {\n        return false;\n      }\n      if (currentStep.completed === void 0) {\n        currentStep.completed = true;\n      }\n      if (props.linear && beforeNewStep && !beforeNewStep.completed) {\n        return false;\n      }\n      if (props.linear && unFunction(currentStep.hasError, currentStep)) {\n        return false;\n      }\n      return true;\n    };\n    const setStep = index => {\n      if (!validateMovingToStep(index)) {\n        return;\n      }\n      emit(\"update:modelValue\", index);\n    };\n    const setFocus = direction => {\n      if (props.navigationDisabled) {\n        return;\n      }\n      if (direction === \"next\") {\n        setFocusNextStep(1);\n      } else {\n        setFocusPrevStep(1);\n      }\n    };\n    const setFocusNextStep = idx => {\n      const newValue = focusedStep.value.stepIndex + idx;\n      if (isNextStepDisabled(newValue)) {\n        return;\n      }\n      if (newValue < props.steps.length) {\n        if (props.steps[newValue].disabled) {\n          setFocusNextStep(idx + 1);\n          return;\n        }\n        focusedStep.value.stepIndex = newValue;\n        focusedStep.value.trigger = true;\n      } else {\n        for (let availableIdx = 0; availableIdx < props.steps.length; availableIdx++) {\n          if (!props.steps[availableIdx].disabled) {\n            focusedStep.value.stepIndex = availableIdx;\n            focusedStep.value.trigger = true;\n            break;\n          }\n        }\n      }\n    };\n    const setFocusPrevStep = idx => {\n      const newValue = focusedStep.value.stepIndex - idx;\n      if (newValue >= 0) {\n        if (props.steps[newValue].disabled) {\n          setFocusPrevStep(idx + 1);\n          return;\n        }\n        focusedStep.value.stepIndex = newValue;\n        focusedStep.value.trigger = true;\n      } else {\n        for (let availableIdx = props.steps.length - 1; availableIdx >= 0; availableIdx--) {\n          if (!props.steps[availableIdx].disabled && !isNextStepDisabled(availableIdx)) {\n            focusedStep.value.stepIndex = availableIdx;\n            focusedStep.value.trigger = true;\n            break;\n          }\n        }\n      }\n    };\n    const resetFocus = () => {\n      requestAnimationFrame(() => {\n        var _a;\n        if (!((_a = stepperNavigation.value) == null ? void 0 : _a.contains(document.activeElement))) {\n          focusedStep.value.stepIndex = props.modelValue;\n          focusedStep.value.trigger = false;\n        }\n      });\n    };\n    watch(() => props.modelValue, () => {\n      focusedStep.value.stepIndex = props.modelValue;\n      focusedStep.value.trigger = false;\n    });\n    const nextStep = (stepsToSkip = 0) => {\n      const targetIndex = modelValue.value + 1 + stepsToSkip;\n      if (!props.steps[targetIndex]) {\n        return;\n      }\n      if (props.steps[targetIndex].disabled) {\n        nextStep(stepsToSkip + 1);\n      }\n      setStep(targetIndex);\n    };\n    const prevStep = (stepsToSkip = 0) => {\n      const targetIndex = modelValue.value - 1 - stepsToSkip;\n      if (!props.steps[targetIndex]) {\n        return;\n      }\n      if (props.steps[targetIndex].disabled) {\n        prevStep(stepsToSkip + 1);\n      }\n      setStep(targetIndex);\n    };\n    const stepControls = {\n      setStep,\n      nextStep,\n      prevStep\n    };\n    const getIterableSlotData = (step, index) => ({\n      ...stepControls,\n      focus: focusedStep,\n      isActive: props.modelValue === index,\n      isCompleted: props.modelValue > index,\n      isLastStep: props.steps.length - 1 === index,\n      isNextStepDisabled: isNextStepDisabled(index),\n      index,\n      step\n    });\n    const {\n      tp\n    } = useTranslation();\n    return {\n      stepperNavigation,\n      resetFocus,\n      focusedStep,\n      isNextStepDisabled,\n      getColor,\n      stepControls,\n      getIterableSlotData,\n      onArrowKeyPress: direction => {\n        setFocus(direction);\n      },\n      onValueChange: () => {\n        focusedStep.value.stepIndex = props.modelValue;\n        focusedStep.value.trigger = true;\n      },\n      ariaAttributesComputed: computed(() => ({\n        role: \"group\",\n        \"aria-label\": tp(props.ariaLabel),\n        \"aria-orientation\": props.vertical ? \"vertical\" : \"horizontal\"\n      })),\n      getStepperButtonColor(index) {\n        var _a;\n        return ((_a = props.steps[index]) == null ? void 0 : _a.hasError) ? \"danger\" : getColor(props.color);\n      },\n      completeStep: shouldCompleteStep => {\n        const steps = {\n          ...props.steps\n        };\n        if (shouldCompleteStep === true) {\n          steps[props.modelValue].hasError = false;\n        }\n        steps[props.modelValue].completed = shouldCompleteStep ?? true;\n        emit(\"update:steps\", steps);\n      },\n      setError: shouldSetError => {\n        const steps = {\n          ...props.steps\n        };\n        steps[props.modelValue].hasError = shouldSetError ?? true;\n        steps[props.modelValue].completed = !shouldSetError;\n        emit(\"update:steps\", steps);\n      }\n    };\n  }\n});\nexport { _sfc_main as _ };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","VaStepperControls","VaStepperStepButton","props","useStatefulProps","modelValue","type","Number","default","steps","Array","required","color","String","vertical","Boolean","navigationDisabled","controlsHidden","nextDisabled","finishButtonHidden","ariaLabel","linear","emits","setup","emit","stepperNavigation","shallowRef","valueComputed","useStateful","defaultValue","focusedStep","ref","trigger","stepIndex","getColor","useColors","isNextStepDisabled","index","value","findFirstNonDisabled","from","direction","length","step","disabled","findFirstWithErrorIndex","hasError","validateMovingToStep","newStep","currentStep","beforeNewStep","nextNonError","_a","beforeLeave","call","completed","unFunction","setStep","setFocus","setFocusNextStep","setFocusPrevStep","idx","newValue","availableIdx","resetFocus","requestAnimationFrame","contains","document","activeElement","watch","nextStep","stepsToSkip","targetIndex","prevStep","stepControls","getIterableSlotData","focus","isActive","isCompleted","isLastStep","tp","useTranslation","onArrowKeyPress","onValueChange","ariaAttributesComputed","computed","role","getStepperButtonColor","completeStep","shouldCompleteStep","setError","shouldSetError"],"sources":["../../../../../src/components/va-stepper/VaStepper.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-stepper\"\n    :class=\"{ 'va-stepper--vertical': $props.vertical }\"\n    v-bind=\"ariaAttributesComputed\"\n  >\n    <ol\n      class=\"va-stepper__navigation\"\n      ref=\"stepperNavigation\"\n      :class=\"{ 'va-stepper__navigation--vertical': $props.vertical }\"\n\n      @click=\"onValueChange\"\n      @keyup.enter=\"onValueChange\"\n      @keyup.space=\"onValueChange\"\n      @keyup.left=\"onArrowKeyPress('prev')\"\n      @keyup.right=\"onArrowKeyPress('next')\"\n      @focusout=\"resetFocus\"\n    >\n      <template\n        v-for=\"(step, i) in $props.steps\"\n        :key=\"i + step.label\"\n      >\n        <slot\n          v-if=\"i > 0\"\n          name=\"divider\"\n          v-bind=\"getIterableSlotData(step, i)\"\n        >\n          <span\n            class=\"va-stepper__divider\"\n            :class=\"{ 'va-stepper__divider--vertical': $props.vertical }\"\n            aria-hidden=\"true\"\n          />\n        </slot>\n\n        <slot\n          :name=\"`step-button-${i}`\"\n          v-bind=\"getIterableSlotData(step, i)\"\n        >\n          <va-stepper-step-button\n            :stepIndex=\"i\"\n            :color=\"getStepperButtonColor(i)\"\n            :modelValue=\"modelValue\"\n            :nextDisabled=\"nextDisabled\"\n            :step=\"step\"\n            :stepControls=\"stepControls\"\n            :navigationDisabled=\"navigationDisabled\"\n            :focus=\"focusedStep\"\n          />\n        </slot>\n      </template>\n    </ol>\n    <div\n      class=\"va-stepper__step-content-wrapper\"\n      :class=\"{ 'va-stepper__step-content-wrapper--vertical': $props.vertical }\"\n    >\n      <template\n        v-for=\"(step, i) in $props.steps\"\n        :key=\"i\"\n      >\n        <div\n          class=\"va-stepper__step-content\"\n          v-if=\"$slots[`step-content-${i}`] && modelValue === i\"\n        >\n          <slot\n            :name=\"`step-content-${i}`\"\n            v-bind=\"getIterableSlotData(step, i)\"\n          />\n        </div>\n      </template>\n      <div class=\"va-stepper__controls\">\n        <va-stepper-controls\n          v-if=\"!controlsHidden\"\n          :modelValue=\"modelValue\"\n          :nextDisabled=\"nextDisabled\"\n          :steps=\"steps\"\n          :stepControls=\"stepControls\"\n          :finishButtonHidden=\"finishButtonHidden\"\n          @finish=\"$emit('finish')\"\n        />\n        <slot\n          name=\"controls\"\n          v-bind=\"getIterableSlotData(steps[modelValue], modelValue)\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, ref, Ref, shallowRef, watch } from 'vue'\nimport { useColors, useStateful, useStatefulProps, useTranslation } from '../../composables'\nimport type { Step, StepControls } from './types'\nimport VaStepperControls from './VaStepperControls.vue'\nimport VaStepperStepButton from './VaStepperStepButton.vue'\nimport { unFunction } from '../../utils/un-function'\n\nexport default defineComponent({\n  name: 'VaStepper',\n  components: { VaStepperControls, VaStepperStepButton },\n  props: {\n    ...useStatefulProps,\n    modelValue: { type: Number, default: 0 },\n    steps: {\n      type: Array as PropType<Step[]>,\n      default: () => [],\n      required: true,\n    },\n    color: { type: String, default: 'primary' },\n    vertical: { type: Boolean, default: false },\n    navigationDisabled: { type: Boolean, default: false },\n    controlsHidden: { type: Boolean, default: false },\n    nextDisabled: { type: Boolean, default: false },\n    finishButtonHidden: { type: Boolean, default: false },\n    ariaLabel: { type: String, default: '$t:progress' },\n    linear: { type: Boolean, default: false },\n  },\n  emits: ['update:modelValue', 'finish', 'update:steps'],\n  setup (props, { emit }) {\n    const stepperNavigation = shallowRef<HTMLElement>()\n    const { valueComputed: modelValue }: { valueComputed: Ref<number> } = useStateful(props, emit, 'modelValue', { defaultValue: 0 })\n\n    const focusedStep = ref({ trigger: false, stepIndex: props.navigationDisabled ? -1 : props.modelValue })\n\n    const { getColor } = useColors()\n\n    const isNextStepDisabled = (index: number) => props.nextDisabled && index > modelValue.value\n\n    const findFirstNonDisabled = (from: number, direction: number) => {\n      while (from >= 0 && from < props.steps.length) {\n        from += direction\n        const step = props.steps[from]\n        if (!step) {\n          return\n        }\n        if (!step.disabled) {\n          return step\n        }\n      }\n    }\n\n    const findFirstWithErrorIndex = (from: number, direction: number) => {\n      while (from >= 0 && from < props.steps.length) {\n        from += direction\n        const step = props.steps[from]\n        if (!step) {\n          return\n        }\n        if (step.hasError === true) {\n          return from\n        }\n      }\n    }\n\n    const validateMovingToStep = (stepIndex: number): boolean => {\n      const newStep = props.steps[stepIndex]\n      const currentStep = props.steps[modelValue.value]\n      const beforeNewStep = findFirstNonDisabled(stepIndex, -1)\n\n      if (newStep.disabled) { return false }\n\n      if (props.linear && stepIndex < modelValue.value) {\n        return true\n      }\n\n      const nextNonError = findFirstWithErrorIndex(modelValue.value, 1)\n\n      if (props.linear && nextNonError !== undefined && nextNonError < stepIndex) {\n        return false\n      }\n\n      //  Checks if a save function was passed, if so it will be called and return boolean\n      if (currentStep.beforeLeave?.(currentStep, newStep) === false) {\n        // Do not update the modelValue if the beforeLeave function returns false\n        return false\n      }\n\n      // Mark current step as completed, if it is not marked manually by user\n      if (currentStep.completed === undefined) {\n        currentStep.completed = true\n      }\n\n      //  Do not do anything if user trying to just over few steps and last is not completed\n      if (props.linear && beforeNewStep && !beforeNewStep.completed) {\n        return false\n      }\n\n      // Check if currentStep has error after beforeLeave function\n      if (props.linear && unFunction(currentStep.hasError, currentStep)) { return false }\n\n      return true\n    }\n\n    const setStep = (index: number) => {\n      if (!validateMovingToStep(index)) { return }\n\n      emit('update:modelValue', index)\n    }\n\n    const setFocus = (direction: 'prev' | 'next') => {\n      if (props.navigationDisabled) { return }\n      if (direction === 'next') {\n        setFocusNextStep(1)\n      } else {\n        setFocusPrevStep(1)\n      }\n    }\n    const setFocusNextStep = (idx: number) => {\n      const newValue = focusedStep.value.stepIndex + idx\n\n      if (isNextStepDisabled(newValue)) { return }\n\n      if (newValue < props.steps.length) {\n        if (props.steps[newValue].disabled) {\n          setFocusNextStep(idx + 1)\n          return\n        }\n        focusedStep.value.stepIndex = newValue\n        focusedStep.value.trigger = true\n      } else {\n        for (let availableIdx = 0; availableIdx < props.steps.length; availableIdx++) {\n          if (!props.steps[availableIdx].disabled) {\n            focusedStep.value.stepIndex = availableIdx\n            focusedStep.value.trigger = true\n            break\n          }\n        }\n      }\n    }\n    const setFocusPrevStep = (idx: number) => {\n      const newValue = focusedStep.value.stepIndex - idx\n      if (newValue >= 0) {\n        if (props.steps[newValue].disabled) {\n          setFocusPrevStep(idx + 1)\n          return\n        }\n        focusedStep.value.stepIndex = newValue\n        focusedStep.value.trigger = true\n      } else {\n        for (let availableIdx = props.steps.length - 1; availableIdx >= 0; availableIdx--) {\n          if (!props.steps[availableIdx].disabled && !(isNextStepDisabled(availableIdx))) {\n            focusedStep.value.stepIndex = availableIdx\n            focusedStep.value.trigger = true\n            break\n          }\n        }\n      }\n    }\n\n    const resetFocus = () => {\n      requestAnimationFrame(() => {\n        if (!stepperNavigation.value?.contains(document.activeElement)) {\n          focusedStep.value.stepIndex = props.modelValue\n          focusedStep.value.trigger = false\n        }\n      })\n    }\n    watch(() => props.modelValue, () => {\n      focusedStep.value.stepIndex = props.modelValue\n      focusedStep.value.trigger = false\n    })\n\n    const nextStep = (stepsToSkip = 0) => {\n      const targetIndex = modelValue.value + 1 + stepsToSkip\n\n      if (!props.steps[targetIndex]) { return }\n      if (props.steps[targetIndex].disabled) {\n        nextStep(stepsToSkip + 1)\n      }\n\n      setStep(targetIndex)\n    }\n\n    const prevStep = (stepsToSkip = 0) => {\n      const targetIndex = modelValue.value - 1 - stepsToSkip\n\n      if (!props.steps[targetIndex]) { return }\n      if (props.steps[targetIndex].disabled) {\n        prevStep(stepsToSkip + 1)\n      }\n\n      setStep(targetIndex)\n    }\n\n    const stepControls: StepControls = { setStep, nextStep, prevStep }\n    const getIterableSlotData = (step: Step, index: number) => ({\n      ...stepControls,\n      focus: focusedStep,\n      isActive: props.modelValue === index,\n      isCompleted: props.modelValue > index,\n      isLastStep: props.steps.length - 1 === index,\n      isNextStepDisabled: isNextStepDisabled(index),\n      index,\n      step,\n    })\n\n    const { tp } = useTranslation()\n\n    return {\n      stepperNavigation,\n      resetFocus,\n      focusedStep,\n      isNextStepDisabled,\n      getColor,\n      stepControls,\n      getIterableSlotData,\n      onArrowKeyPress: (direction: 'prev' | 'next') => {\n        setFocus(direction)\n      },\n      onValueChange: () => {\n        focusedStep.value.stepIndex = props.modelValue\n        focusedStep.value.trigger = true\n      },\n      ariaAttributesComputed: computed(() => ({\n        role: 'group',\n        'aria-label': tp(props.ariaLabel),\n        'aria-orientation': props.vertical ? 'vertical' as const : 'horizontal' as const,\n      })),\n      getStepperButtonColor (index: number) {\n        return props.steps[index]?.hasError ? 'danger' : getColor(props.color)\n      },\n      completeStep: (shouldCompleteStep?: boolean) => {\n        const steps = { ...props.steps }\n        if (shouldCompleteStep === true) {\n          steps[props.modelValue].hasError = false\n        }\n\n        steps[props.modelValue].completed = shouldCompleteStep ?? true\n\n        emit('update:steps', steps)\n      },\n      setError: (shouldSetError?: boolean) => {\n        const steps = { ...props.steps }\n        steps[props.modelValue].hasError = shouldSetError ?? true\n        steps[props.modelValue].completed = !shouldSetError ?? false\n\n        emit('update:steps', steps)\n      },\n    }\n  },\n})\n\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-stepper {\n  display: flex;\n  flex-direction: column;\n\n  &--vertical {\n    flex-direction: row;\n  }\n\n  &__navigation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n\n    &--vertical {\n      flex-direction: column;\n      align-items: flex-start;\n      flex-wrap: nowrap;\n    }\n  }\n\n  &__divider {\n    flex-grow: 1;\n    height: var(--va-stepper-divider-thickness);\n    width: var(--va-stepper-divider-length);\n    min-width: var(--va-stepper-divider-min-length);\n    margin: 0 var(--va-stepper-divider-spacing);\n    background: var(--va-stepper-divider-color);\n\n    &--vertical {\n      min-height: var(--va-stepper-divider-min-length);\n      height: var(--va-stepper-divider-length);\n      width: var(--va-stepper-divider-thickness);\n      min-width: var(--va-stepper-divider-thickness);\n      margin: var(--va-stepper-divider-spacing) 0;\n      margin-left: var(--va-stepper-divider-vertical-margin-left);\n    }\n  }\n\n  &__step-content-wrapper {\n    padding: var(--va-stepper-step-content-wrapper-padding);\n  }\n\n  &__step-content {\n    margin: var(--va-stepper-step-content-margin);\n  }\n\n  &__controls {\n    display: flex;\n    gap: var(--va-stepper-controls-gap);\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}