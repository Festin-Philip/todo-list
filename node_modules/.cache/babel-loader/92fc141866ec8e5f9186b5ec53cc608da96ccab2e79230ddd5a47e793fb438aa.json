{"ast":null,"code":"import { computed } from \"vue\";\nimport { u as useHTMLElement } from \"./useHTMLElement-af551f75.mjs\";\nimport { u as useCurrentElement } from \"./useCurrentElement-a7d22ac8.mjs\";\nimport { u as useActiveElement } from \"./useActiveElement-6965d0a8.mjs\";\nconst useFocusDeep = el => {\n  const focused = useActiveElement();\n  const current = useCurrentElement(el ? useHTMLElement(el) : void 0);\n  let previouslyFocusedElement = null;\n  const isFocused = computed({\n    get() {\n      var _a;\n      if (!focused.value) {\n        return false;\n      }\n      if (focused.value === current.value) {\n        return true;\n      }\n      const isFocused2 = (_a = current.value) == null ? void 0 : _a.contains(focused.value);\n      if (isFocused2) {\n        previouslyFocusedElement = focused.value;\n      }\n      return isFocused2;\n    },\n    set(value) {\n      var _a;\n      let target = previouslyFocusedElement ?? current.value;\n      if (!((_a = current.value) == null ? void 0 : _a.contains(target))) {\n        target = current.value;\n      }\n      if (value) {\n        target == null ? void 0 : target.focus();\n      } else {\n        target == null ? void 0 : target.blur();\n      }\n    }\n  });\n  return Object.assign(isFocused, {\n    /** Focus `el` if focus is not set to any other element */\n    focusIfNothingIfFocused: () => {\n      if (focused.value === document.body) {\n        isFocused.value = true;\n      }\n    },\n    focusPreviousElement: () => {\n      if (previouslyFocusedElement) {\n        previouslyFocusedElement.focus();\n      } else {\n        document.body.focus();\n      }\n    }\n  });\n};\nexport { useFocusDeep as u };","map":{"version":3,"names":["useFocusDeep","el","focused","useActiveElement","current","useCurrentElement","useHTMLElement","previouslyFocusedElement","isFocused","computed","get","value","isFocused2","_a","contains","set","target","focus","blur","Object","assign","focusIfNothingIfFocused","document","body","focusPreviousElement"],"sources":["../../../../src/composables/useFocusDeep.ts"],"sourcesContent":["import { computed, Ref, DefineComponent, Component } from 'vue'\nimport { useHTMLElement } from './useHTMLElement'\nimport { useCurrentElement } from './useCurrentElement'\nimport { useActiveElement } from './useActiveElement'\n\n/**\n * `true` if `el` or any of his children are in focus\n *\n *  if set to `true` set `el` focused, but if any of `el` children was focused before, set child focused instead\n *\n * @notice this will not trigger native `focus` event and you need to trigger it manually and handle infinite loop\n */\nexport const useFocusDeep = (el?: Ref<HTMLElement | DefineComponent | undefined | Component>) => {\n  const focused = useActiveElement()\n  const current = useCurrentElement(el ? useHTMLElement(el) : undefined)\n  // Cache previouslyFocusedElement, so we can simply come back to it\n  let previouslyFocusedElement: HTMLElement | null = null\n\n  const isFocused = computed<boolean | undefined>({\n    get () {\n      if (!focused.value) { return false }\n      if (focused.value === current.value) { return true }\n\n      const isFocused = current.value?.contains(focused.value)\n      if (isFocused) { previouslyFocusedElement = focused.value }\n      return isFocused\n    },\n    set (value) {\n      let target = previouslyFocusedElement ?? current.value\n\n      if (!current.value?.contains(target!)) {\n        target = current.value\n      }\n\n      // NOTICE: Focus and blur events will not be dispatched here to prevent infinite loop\n      if (value) {\n        (target)?.focus()\n      } else {\n        (target)?.blur()\n      }\n    },\n  })\n\n  return Object.assign(isFocused, {\n    /** Focus `el` if focus is not set to any other element */\n    focusIfNothingIfFocused: () => {\n      // body if focused by default, but we assume it means nothing is focused\n      // by nothing we mean elements like input, button, etc.\n      if (focused.value === document.body) {\n        isFocused.value = true\n      }\n    },\n\n    focusPreviousElement: () => {\n      if (previouslyFocusedElement) {\n        previouslyFocusedElement.focus()\n      } else {\n        document.body.focus()\n      }\n    },\n  })\n}\n"],"mappings":";;;;AAYa,MAAAA,YAAA,GAAgBC,EAAA,IAAoE;EAC/F,MAAMC,OAAA,GAAUC,gBAAA;EAChB,MAAMC,OAAA,GAAUC,iBAAA,CAAkBJ,EAAA,GAAKK,cAAA,CAAeL,EAAE,IAAI,MAAS;EAErE,IAAIM,wBAAA,GAA+C;EAEnD,MAAMC,SAAA,GAAYC,QAAA,CAA8B;IAC9CC,IAAA,EAAO;;MACD,KAACR,OAAA,CAAQS,KAAA,EAAO;QAAS;MAAM;MAC/B,IAAAT,OAAA,CAAQS,KAAA,KAAUP,OAAA,CAAQO,KAAA,EAAO;QAAS;MAAK;MAEnD,MAAMC,UAAA,IAAYC,EAAA,GAAAT,OAAA,CAAQO,KAAA,KAAR,gBAAAE,EAAA,CAAeC,QAAA,CAASZ,OAAA,CAAQS,KAAA;MAClD,IAAIC,UAAA,EAAW;QAAEL,wBAAA,GAA2BL,OAAA,CAAQS,KAAA;MAAM;MACnD,OAAAC,UAAA;IACT;IACAG,IAAKJ,KAAA,EAAO;;MACN,IAAAK,MAAA,GAAST,wBAAA,IAA4BH,OAAA,CAAQO,KAAA;MAEjD,IAAI,GAACE,EAAA,GAAAT,OAAA,CAAQO,KAAA,KAAR,gBAAAE,EAAA,CAAeC,QAAA,CAASE,MAAA,IAAU;QACrCA,MAAA,GAASZ,OAAA,CAAQO,KAAA;MACnB;MAGA,IAAIA,KAAA,EAAO;QACRK,MAAA,oBAAAA,MAAA,CAASC,KAAA;MAAM,OACX;QACJD,MAAA,oBAAAA,MAAA,CAASE,IAAA;MACZ;IACF;EAAA,CACD;EAEM,OAAAC,MAAA,CAAOC,MAAA,CAAOZ,SAAA,EAAW;IAAA;IAE9Ba,uBAAA,EAAyBA,CAAA,KAAM;MAGzB,IAAAnB,OAAA,CAAQS,KAAA,KAAUW,QAAA,CAASC,IAAA,EAAM;QACnCf,SAAA,CAAUG,KAAA,GAAQ;MACpB;IACF;IAEAa,oBAAA,EAAsBA,CAAA,KAAM;MAC1B,IAAIjB,wBAAA,EAA0B;QAC5BA,wBAAA,CAAyBU,KAAA,CAAM;MAAA,OAC1B;QACLK,QAAA,CAASC,IAAA,CAAKN,KAAA;MAChB;IACF;EAAA,CACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}