{"ast":null,"code":"import { defineComponent, shallowRef, computed } from \"vue\";\nimport { p as pick } from \"../../../vendor-2b2dbafd.mjs\";\nimport { V as VaInputWrapper } from \"../va-input-wrapper/index-66a85aff.mjs\";\nimport { f as focusElement, b as blurElement } from \"../../utils/focus-685f6da0.mjs\";\nimport { e as extractComponentProps } from \"../../utils/component-options/extract-component-options-6b96d215.mjs\";\nimport { u as useFormFieldProps } from \"../../composables/useFormField-3d39d61a.mjs\";\nimport { a as useStatefulProps, b as useStateful } from \"../../composables/useStateful-78f75564.mjs\";\nimport { u as useValidationProps, a as useValidationEmits, b as useValidation } from \"../../composables/useValidation-d5e122b8.mjs\";\nimport { f as filterComponentProps } from \"../../utils/component-options/filter-props-9727421a.mjs\";\nimport { u as useEmitProxy } from \"../../composables/useEmitProxy-a435894a.mjs\";\nconst positiveNumberValidator = val => {\n  if (val > 0 && (val | 0) === val) {\n    return true;\n  }\n  throw new Error(`\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`);\n};\nconst {\n  createEmits,\n  createListeners\n} = useEmitProxy([\"input\", \"change\", \"click\", \"update:modelValue\"]);\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper);\nconst _sfc_main = defineComponent({\n  name: \"VaTextarea\",\n  components: {\n    VaInputWrapper\n  },\n  props: {\n    ...useFormFieldProps,\n    ...VaInputWrapperProps,\n    ...useStatefulProps,\n    ...useValidationProps,\n    modelValue: {\n      type: [String, Number],\n      default: \"\"\n    },\n    placeholder: {\n      type: String\n    },\n    autosize: {\n      type: Boolean,\n      default: false\n    },\n    minRows: {\n      type: Number,\n      default: 1,\n      validator: positiveNumberValidator\n    },\n    maxRows: {\n      type: Number,\n      validator: positiveNumberValidator\n    },\n    resize: {\n      type: Boolean,\n      default: true\n    },\n    clearValue: {\n      type: [String],\n      default: \"\"\n    }\n  },\n  emits: [...createEmits(), ...useValidationEmits],\n  setup(props, {\n    emit\n  }) {\n    const textarea = shallowRef();\n    const {\n      valueComputed\n    } = useStateful(props, emit, \"modelValue\", {\n      defaultValue: \"\"\n    });\n    const focus = () => {\n      focusElement(textarea.value);\n    };\n    const blur = () => {\n      blurElement(textarea.value);\n    };\n    const reset = () => withoutValidation(() => {\n      emit(\"update:modelValue\", props.clearValue);\n      emit(\"clear\");\n      resetValidation();\n    });\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners: validationListeners,\n      validationAriaAttributes,\n      isLoading,\n      resetValidation,\n      withoutValidation\n    } = useValidation(props, emit, {\n      value: valueComputed,\n      focus,\n      reset\n    });\n    const isResizable = computed(() => {\n      return props.resize && !props.autosize;\n    });\n    const computedRowsCount = computed(() => {\n      if (!props.autosize) {\n        return void 0;\n      }\n      const rows = valueComputed.value.toString().split(\"\\n\").length;\n      if (!props.maxRows) {\n        return rows;\n      }\n      return Math.max(props.minRows, Math.min(rows, props.maxRows));\n    });\n    const computedStyle = computed(() => ({\n      resize: isResizable.value ? void 0 : \"none\"\n    }));\n    const computedProps = computed(() => ({\n      ...pick(props, [\"disabled\", \"readonly\", \"placeholder\", \"ariaLabel\"])\n    }));\n    return {\n      isResizable,\n      validationListeners,\n      validationAriaAttributes,\n      computedError,\n      computedErrorMessages,\n      isLoading,\n      computedRowsCount,\n      valueComputed,\n      vaInputWrapperProps: filterComponentProps(VaInputWrapperProps),\n      textarea,\n      computedStyle,\n      listeners: createListeners(emit),\n      computedProps,\n      focus,\n      blur\n    };\n  }\n});\nexport { _sfc_main as _ };","map":{"version":3,"names":["positiveNumberValidator","val","Error","createEmits","createListeners","useEmitProxy","VaInputWrapperProps","extractComponentProps","VaInputWrapper","_sfc_main","defineComponent","name","components","props","useFormFieldProps","useStatefulProps","useValidationProps","modelValue","type","String","Number","default","placeholder","autosize","Boolean","minRows","validator","maxRows","resize","clearValue","emits","useValidationEmits","setup","emit","textarea","shallowRef","valueComputed","useStateful","defaultValue","focus","focusElement","value","blur","blurElement","reset","withoutValidation","resetValidation","computedError","computedErrorMessages","listeners","validationListeners","validationAriaAttributes","isLoading","useValidation","isResizable","computed","computedRowsCount","rows","toString","split","length","Math","max","min","computedStyle","computedProps","pick","vaInputWrapperProps","filterComponentProps"],"sources":["../../../../../src/components/va-textarea/VaTextarea.vue"],"sourcesContent":["<template>\n  <VaInputWrapper\n    class=\"va-textarea\"\n    v-bind=\"vaInputWrapperProps\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n  >\n    <div class=\"va-textarea__resize-wrapper\" :class=\"{\n      'va-textarea__resize-wrapper--resizable': isResizable,\n    }\">\n      <textarea\n        v-model=\"valueComputed\"\n        v-bind=\"{ ...computedProps, ...listeners, ...validationAriaAttributes }\"\n        :style=\"computedStyle\"\n        :rows=\"computedRowsCount\"\n        :loading=\"isLoading\"\n        ref=\"textarea\"\n        :ariaLabel=\"$props.label\"\n        class=\"va-textarea__textarea\"\n        @focus=\"validationListeners.onFocus\"\n        @blur=\"validationListeners.onBlur\"\n      />\n    </div>\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, CSSProperties, shallowRef } from 'vue'\nimport pick from 'lodash/pick.js'\nimport { VaInputWrapper } from '../va-input-wrapper'\n\nimport { useFormFieldProps, useEmitProxy, useStateful, useStatefulProps, useValidation, useValidationProps, useValidationEmits } from '../../composables'\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\nimport { blurElement, focusElement } from '../../utils/focus'\n\nconst positiveNumberValidator = (val: number) => {\n  if (val > 0 && (val | 0) === val) {\n    return true\n  }\n  throw new Error(`\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`)\n}\n\nconst { createEmits, createListeners } = useEmitProxy([\n  'input', 'change', 'click', 'update:modelValue',\n])\n\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper)\n\nexport default defineComponent({\n  name: 'VaTextarea',\n\n  components: { VaInputWrapper },\n\n  props: {\n    ...useFormFieldProps,\n    ...VaInputWrapperProps,\n    ...useStatefulProps,\n    ...useValidationProps,\n    modelValue: { type: [String, Number], default: '' },\n    placeholder: { type: String },\n    autosize: { type: Boolean, default: false },\n    minRows: {\n      type: Number,\n      default: 1,\n      validator: positiveNumberValidator,\n    },\n    maxRows: {\n      type: Number,\n      validator: positiveNumberValidator,\n    },\n    resize: {\n      type: Boolean,\n      default: true,\n    },\n    clearValue: {\n      type: [String],\n      default: '',\n    },\n  },\n\n  emits: [...createEmits(), ...useValidationEmits],\n\n  setup (props, { emit }) {\n    const textarea = shallowRef<HTMLTextAreaElement>()\n    const { valueComputed } = useStateful(props, emit, 'modelValue', {\n      defaultValue: '',\n    })\n\n    const focus = () => {\n      focusElement(textarea.value)\n    }\n\n    const blur = () => {\n      blurElement(textarea.value)\n    }\n\n    const reset = () => withoutValidation(() => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n      resetValidation()\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners: validationListeners,\n      validationAriaAttributes,\n      isLoading,\n      resetValidation,\n      withoutValidation,\n    } = useValidation(props, emit, {\n      value: valueComputed,\n      focus,\n      reset,\n    })\n\n    const isResizable = computed(() => {\n      return props.resize && !props.autosize\n    })\n\n    const computedRowsCount = computed<number | undefined>(() => {\n      if (!props.autosize) {\n        return undefined\n      }\n\n      const rows = valueComputed.value.toString().split('\\n').length\n\n      if (!props.maxRows) {\n        return rows\n      }\n\n      return Math.max(props.minRows, Math.min(rows, props.maxRows))\n    })\n\n    const computedStyle = computed(() => ({\n      resize: isResizable.value ? undefined : 'none',\n    }) as CSSProperties)\n\n    const computedProps = computed(() => ({\n      ...pick(props, ['disabled', 'readonly', 'placeholder', 'ariaLabel']),\n    }))\n\n    return {\n      isResizable,\n      validationListeners,\n      validationAriaAttributes,\n      computedError,\n      computedErrorMessages,\n      isLoading,\n      computedRowsCount,\n      valueComputed,\n      vaInputWrapperProps: filterComponentProps(VaInputWrapperProps),\n      textarea,\n      computedStyle,\n      listeners: createListeners(emit),\n      computedProps,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources/index.scss';\n\n.va-textarea {\n  .va-input-wrapper__field {\n    padding-top: 12px;\n    padding-bottom: 12px;\n    align-items: flex-start;\n  }\n\n  &__resize-wrapper {\n    display: flex;\n    overflow: hidden;\n    width: 100%;\n\n    &--resizable {\n      resize: vertical;\n    }\n  }\n\n  &__textarea {\n    border: 0;\n    flex: 1;\n    font-family: var(--va-font-family);\n    width: 100%;\n    padding: 1px 0;\n    margin: -1px 0;\n    background: transparent;\n    color: currentColor;\n    box-sizing: content-box;\n    min-height: 1.15rem;\n    outline: none;\n    position: relative;\n    resize: none;\n\n    @include va-scroll(var(--va-secondary));\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}