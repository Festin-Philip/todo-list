{"ast":null,"code":"import { defineComponent, ref, computed, toRefs, watch } from \"vue\";\nimport { V as VaIcon } from \"../../../va-icon/index-e46b09d5.mjs\";\nimport { V as VaBadge } from \"../../../va-badge/index-b13bb9d2.mjs\";\nimport { u as useFormFieldProps } from \"../../../../composables/useFormField-3d39d61a.mjs\";\nconst _sfc_main = defineComponent({\n  name: \"VaSelectContent\",\n  components: {\n    VaBadge,\n    VaIcon\n  },\n  props: {\n    ...useFormFieldProps,\n    ariaAttributes: {\n      type: Object\n    },\n    value: {\n      type: Array,\n      required: true\n    },\n    valueString: {\n      type: String\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    tabindex: {\n      type: [String, Number],\n      default: 0\n    },\n    hiddenSelectedOptionsAmount: {\n      type: Number,\n      default: 0\n    },\n    isAllOptionsShown: {\n      type: Boolean,\n      default: false\n    },\n    autocomplete: {\n      type: Boolean,\n      default: false\n    },\n    focused: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    getText: {\n      type: Function,\n      required: true\n    },\n    autocompleteInputValue: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"toggle-hidden\", \"autocomplete-input\", \"focus-prev\", \"focus-next\", \"select-option\", \"delete-last-selected\"],\n  setup(props, {\n    emit\n  }) {\n    const autocompleteInput = ref();\n    const isPlaceholder = computed(() => props.placeholder && !props.valueString);\n    const toggleHiddenOptionsState = () => emit(\"toggle-hidden\");\n    const {\n      value,\n      focused\n    } = toRefs(props);\n    const autocompleteInputValueComputed = computed({\n      get: () => props.autocompleteInputValue,\n      set: v => emit(\"autocomplete-input\", v)\n    });\n    watch(focused, newValue => {\n      var _a, _b;\n      if (!props.autocomplete || !newValue) {\n        return;\n      }\n      if (autocompleteInputValueComputed.value) {\n        (_a = autocompleteInput.value) == null ? void 0 : _a.setSelectionRange(0, autocompleteInputValueComputed.value.length);\n      } else {\n        (_b = autocompleteInput.value) == null ? void 0 : _b.focus();\n      }\n    });\n    const handleBackspace = e => {\n      if (props.multiple && value.value.length && e.key === \"Backspace\" && !autocompleteInputValueComputed.value) {\n        emit(\"delete-last-selected\");\n      }\n    };\n    return {\n      getIcon: option => typeof option === \"object\" ? option.icon : void 0,\n      isPlaceholder,\n      toggleHiddenOptionsState,\n      autocompleteInputValueComputed,\n      autocompleteInput,\n      handleBackspace\n    };\n  }\n});\nexport { _sfc_main as _ };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","VaBadge","VaIcon","props","useFormFieldProps","ariaAttributes","type","Object","value","Array","required","valueString","String","placeholder","default","tabindex","Number","hiddenSelectedOptionsAmount","isAllOptionsShown","Boolean","autocomplete","focused","multiple","getText","Function","autocompleteInputValue","emits","setup","emit","autocompleteInput","ref","isPlaceholder","computed","toggleHiddenOptionsState","toRefs","autocompleteInputValueComputed","get","set","v","watch","newValue","_a","setSelectionRange","length","_b","focus","handleBackspace","e","key","getIcon","option","icon"],"sources":["../../../../../../../src/components/va-select/components/VaSelectContent/VaSelectContent.vue"],"sourcesContent":["<template>\n  <div\n    v-if=\"$props.autocomplete\"\n    class=\"va-select-content__autocomplete\"\n  >\n    <slot\n      v-if=\"$props.multiple || $slots.content\"\n      name=\"content\"\n      v-bind=\"{\n        value: $props.value,\n        valueString: $props.valueString,\n        tabindex: $props.tabindex,\n        ariaAttributes,\n      }\"\n    >\n      <template v-if=\"value.length\">\n        <span\n          v-for=\"(option, index) in value\"\n          :key=\"$props.getText(option)\"\n        >\n          <va-icon\n            v-if=\"getIcon(option)\"\n            size=\"small\"\n            class=\"va-select-option__icon\"\n            :name=\"getIcon(option)\"\n          />\n          {{ `${$props.getText(option)}${index + 1 === value.length ? '' : ', '}` }}\n        </span>\n      </template>\n\n      <template v-else>\n        {{ $props.valueString }}\n      </template>\n    </slot>\n\n    <input\n      v-bind=\"ariaAttributes\"\n      ref=\"autocompleteInput\"\n      v-model=\"autocompleteInputValueComputed\"\n      :placeholder=\"$props.placeholder\"\n      :disabled=\"$props.disabled\"\n      :readonly=\"$props.readonly\"\n      autocomplete=\"off\"\n      aria-autocomplete=\"list\"\n      @keydown.up.stop.prevent=\"$emit('focus-prev')\"\n      @keydown.down.stop.prevent=\"$emit('focus-next')\"\n      @keydown.enter.stop.prevent=\"$emit('select-option')\"\n      @keydown=\"handleBackspace\"\n    />\n  </div>\n\n  <span\n    v-else-if=\"isPlaceholder\"\n    class=\"va-select-content__placeholder\"\n  >\n   <input v-bind=\"ariaAttributes\" :placeholder=\"$props.placeholder\" readonly />\n  </span>\n\n  <slot\n    v-else\n    name=\"content\"\n    v-bind=\"{\n      valueString: $props.valueString,\n      value: $props.value,\n      tabindex: $props.tabindex,\n      ariaAttributes,\n    }\"\n  >\n    <va-icon\n      v-if=\"getIcon(value[0])\"\n      size=\"small\"\n      class=\"va-select-option__icon\"\n      :name=\"getIcon(value[0])\"\n    />\n    {{ $props.valueString }}\n  </slot>\n\n  <slot\n    name=\"hiddenOptionsBadge\"\n    v-bind=\"{\n      amount: $props.hiddenSelectedOptionsAmount,\n      isShown: $props.isAllOptionsShown,\n      toggle: toggleHiddenOptionsState,\n    }\"\n  >\n    <va-badge\n      v-if=\"$props.hiddenSelectedOptionsAmount && !$props.isAllOptionsShown\"\n      class=\"va-select-content__state-icon\"\n      color=\"info\"\n      :text=\"`+${$props.hiddenSelectedOptionsAmount}`\"\n      :tabindex=\"$props.tabindex\"\n      @click.stop=\"toggleHiddenOptionsState\"\n    />\n  </slot>\n\n  <slot\n    name=\"hideOptionsButton\"\n    v-bind=\"{\n      isShown: $props.isAllOptionsShown,\n      toggle: toggleHiddenOptionsState,\n    }\"\n  >\n    <va-icon\n      v-if=\"$props.isAllOptionsShown\"\n      role=\"button\"\n      class=\"va-select-content__state-icon\"\n      size=\"small\"\n      name=\"reply\"\n      :tabindex=\"$props.tabindex\"\n      @click.stop=\"toggleHiddenOptionsState\"\n    />\n  </slot>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, toRefs, computed, watch, type PropType } from 'vue'\n\nimport { useFormFieldProps } from '../../../../composables'\n\nimport { VaIcon } from '../../../va-icon'\nimport { VaBadge } from '../../../va-badge'\n\nimport type { SelectOption } from '../../../index'\n\nexport default defineComponent({\n  name: 'VaSelectContent',\n\n  components: { VaBadge, VaIcon },\n\n  props: {\n    ...useFormFieldProps,\n\n    ariaAttributes: { type: Object },\n    value: { type: Array as PropType<SelectOption[]>, required: true },\n    valueString: { type: String },\n    placeholder: { type: String, default: '' },\n    tabindex: { type: [String, Number], default: 0 },\n    hiddenSelectedOptionsAmount: { type: Number, default: 0 },\n    isAllOptionsShown: { type: Boolean, default: false },\n    autocomplete: { type: Boolean, default: false },\n    focused: { type: Boolean, default: false },\n    multiple: { type: Boolean, default: false },\n    getText: { type: Function as PropType<(option: SelectOption) => string>, required: true },\n    autocompleteInputValue: { type: String, default: '' },\n  },\n\n  emits: ['toggle-hidden', 'autocomplete-input', 'focus-prev', 'focus-next', 'select-option', 'delete-last-selected'],\n\n  setup (props, { emit }) {\n    const autocompleteInput = ref<HTMLInputElement>()\n\n    const isPlaceholder = computed(() => props.placeholder && !props.valueString)\n\n    const toggleHiddenOptionsState = () => emit('toggle-hidden')\n\n    const { value, focused } = toRefs(props)\n\n    const autocompleteInputValueComputed = computed({\n      get: () => props.autocompleteInputValue,\n      set: (v: string) => emit('autocomplete-input', v),\n    })\n\n    watch(focused, (newValue) => {\n      if (!props.autocomplete || !newValue) { return }\n\n      if (autocompleteInputValueComputed.value) {\n        // native select method doesn't work in mobile Safari, so we need this instead\n        autocompleteInput.value?.setSelectionRange(0, autocompleteInputValueComputed.value.length)\n      } else {\n        autocompleteInput.value?.focus()\n      }\n    })\n\n    const handleBackspace = (e: KeyboardEvent) => {\n      if (props.multiple && value.value.length && e.key === 'Backspace' && !autocompleteInputValueComputed.value) {\n        emit('delete-last-selected')\n      }\n    }\n\n    return {\n      getIcon: (option: SelectOption) => typeof option === 'object' ? (option.icon as string) : undefined,\n      isPlaceholder,\n      toggleHiddenOptionsState,\n      autocompleteInputValueComputed,\n      autocompleteInput,\n      handleBackspace,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import '../../variables';\n\n.va-select-content {\n  &__autocomplete {\n    display: flex;\n    flex-wrap: wrap;\n    gap: var(--va-select-content-autocomplete-gap);\n    color: var(--va-select-content-autocomplete-color);\n    font-size: var(--va-input-font-size);\n    line-height: var(--va-select-content-autocomplete-line-height);\n\n    & input {\n      flex: 1 1;\n    }\n  }\n\n  &__placeholder {\n    overflow: hidden !important;\n    flex: 1;\n    line-height: normal;\n    color: var(--va-input-placeholder-text-color);\n    text-overflow: ellipsis !important;\n    white-space: nowrap !important;\n  }\n\n  &__state-icon {\n    margin-left: var(--va-select-state-icon-margin-left);\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}