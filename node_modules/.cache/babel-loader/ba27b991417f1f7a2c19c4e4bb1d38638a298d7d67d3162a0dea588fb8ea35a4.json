{"ast":null,"code":"import { u as useCurrentComponentId } from \"./useCurrentComponentId-01b0304d.mjs\";\nconst TELEPORT_FROM_ATTR = \"data-va-teleported-from\";\nconst TELEPORT_ATTR = \"data-va-teleported\";\nconst findTeleportedFrom = el => {\n  if (!el) {\n    return null;\n  }\n  const teleportId = el.getAttribute(TELEPORT_ATTR);\n  if (teleportId === null) {\n    return findTeleportedFrom(el.parentElement);\n  }\n  return document.querySelector(`[${TELEPORT_FROM_ATTR}=\"${teleportId}\"]`);\n};\nconst useTeleported = () => {\n  const componentId = useCurrentComponentId();\n  return {\n    teleportFromAttrs: {\n      [TELEPORT_FROM_ATTR]: componentId\n    },\n    teleportedAttrs: {\n      [TELEPORT_ATTR]: componentId\n    },\n    findTeleportedFrom\n  };\n};\nexport { findTeleportedFrom as f, useTeleported as u };","map":{"version":3,"names":["TELEPORT_FROM_ATTR","TELEPORT_ATTR","findTeleportedFrom","el","teleportId","getAttribute","parentElement","document","querySelector","useTeleported","componentId","useCurrentComponentId","teleportFromAttrs","teleportedAttrs"],"sources":["../../../../src/composables/useTeleported.ts"],"sourcesContent":["import { useCurrentComponentId } from './useCurrentComponentId'\n\nexport const TELEPORT_FROM_ATTR = 'data-va-teleported-from'\nexport const TELEPORT_ATTR = 'data-va-teleported'\n\nexport const findTeleportedFrom = (el: HTMLElement | undefined | null): HTMLElement | null => {\n  if (!el) { return null }\n\n  const teleportId = el.getAttribute(TELEPORT_ATTR)\n\n  if (teleportId === null) { return findTeleportedFrom(el.parentElement) }\n\n  return document.querySelector<HTMLElement>(`[${TELEPORT_FROM_ATTR}=\"${teleportId}\"]`)\n}\n\n/**\n * Used in components, which have something to do with Teleport.\n * You need to add `teleportFromAttrs` to the root element of the component,\n * and `teleportedAttrs` to the element, which is teleported.\n *\n * This way you can find the original element, which was teleported from.\n *\n * @notice it is used in `useClickOutside` to track from where teleported originated from.\n */\nexport const useTeleported = () => {\n  const componentId = useCurrentComponentId()\n\n  return {\n    teleportFromAttrs: {\n      [TELEPORT_FROM_ATTR]: componentId,\n    },\n    teleportedAttrs: {\n      [TELEPORT_ATTR]: componentId,\n    },\n    findTeleportedFrom,\n  }\n}\n"],"mappings":";AAEO,MAAMA,kBAAA,GAAqB;AAC3B,MAAMC,aAAA,GAAgB;AAEhB,MAAAC,kBAAA,GAAsBC,EAAA,IAA2D;EAC5F,IAAI,CAACA,EAAA,EAAI;IAAS;EAAK;EAEjB,MAAAC,UAAA,GAAaD,EAAA,CAAGE,YAAA,CAAaJ,aAAa;EAEhD,IAAIG,UAAA,KAAe,MAAM;IAAS,OAAAF,kBAAA,CAAmBC,EAAA,CAAGG,aAAa;EAAE;EAEvE,OAAOC,QAAA,CAASC,aAAA,CAA2B,IAAIR,kBAAA,KAAuBI,UAAA,IAAc;AACtF;AAWO,MAAMK,aAAA,GAAgBA,CAAA,KAAM;EACjC,MAAMC,WAAA,GAAcC,qBAAA;EAEb;IACLC,iBAAA,EAAmB;MACjB,CAACZ,kBAAkB,GAAGU;IACxB;IACAG,eAAA,EAAiB;MACf,CAACZ,aAAa,GAAGS;IACnB;IACAR;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}