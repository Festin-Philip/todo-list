{"ast":null,"code":"import { getCurrentInstance, inject as inject$1 } from \"vue\";\nimport { t as throwError } from \"../utils/console-33a7ea8d.mjs\";\nlet currentApp = null;\nlet prevRegisteredApp = null;\nconst setCurrentApp = newApp => {\n  if ((prevRegisteredApp == null ? void 0 : prevRegisteredApp._instance) === null) {\n    prevRegisteredApp = null;\n  }\n  if (newApp === null && prevRegisteredApp === null) {\n    return;\n  }\n  prevRegisteredApp = currentApp;\n  currentApp = newApp;\n};\nconst getCurrentApp = () => currentApp;\nconst inject = (key, value = void 0) => {\n  var _a;\n  const injectedFromApp = (_a = getCurrentApp()) == null ? void 0 : _a._context.provides[key];\n  const vm = getCurrentInstance();\n  if (vm) {\n    return inject$1(key, value);\n  }\n  return injectedFromApp ?? throwError(\"You're using Vuestic composable outside Vue app. Since you registered Vuestic in multiple apps, composables can not be used outside setup function anymore.\");\n};\nexport { getCurrentApp as g, inject as i, setCurrentApp as s };","map":{"version":3,"names":["currentApp","prevRegisteredApp","setCurrentApp","newApp","_instance","getCurrentApp","inject","key","value","injectedFromApp","_a","_context","provides","vm","getCurrentInstance","inject$1","throwError"],"sources":["../../../../src/services/current-app.ts"],"sourcesContent":["import type { App } from 'vue'\nimport { getCurrentInstance, inject as vueInject } from 'vue'\nimport { throwError } from '../utils/console'\n\n/**\n * Similar to `getCurrentInstance` but for plugins, so we can use inject in plugins.\n */\nlet currentApp: App | null = null\nlet prevRegisteredApp: App | null = null\n\nexport const setCurrentApp = (newApp: App | null) => {\n  // If prev app unregistered, set it to null\n  if (prevRegisteredApp?._instance === null) {\n    prevRegisteredApp = null\n  }\n\n  // Disallow setting current app to null if prev app is not unregistered\n  if (newApp === null && prevRegisteredApp === null) { return }\n\n  // In case prevApp registered we allow currentApp to be null\n  // This is used to understand if we're in single app mode\n  // If user have registered app once we allow him to use composables outside of setup function\n  // Otherwise we throw error because we don't know which app context to use\n  prevRegisteredApp = currentApp\n  currentApp = newApp\n}\n\nexport const getCurrentApp = () => currentApp\n\n/** Wrapper around vue inject, so it can be used in plugins */\nexport const inject = ((key: string, value: any = undefined) => {\n  const injectedFromApp = getCurrentApp()?._context.provides[key]\n  const vm = getCurrentInstance()\n\n  if (vm) {\n    return vueInject(key, value)\n  }\n\n  // In case user in single app mode, we allow him to use composables outside of setup function\n  return injectedFromApp ?? throwError('You\\'re using Vuestic composable outside Vue app. Since you registered Vuestic in multiple apps, composables can not be used outside setup function anymore.')\n}) as unknown as typeof vueInject\n"],"mappings":";;AAOA,IAAIA,UAAA,GAAyB;AAC7B,IAAIC,iBAAA,GAAgC;AAEvB,MAAAC,aAAA,GAAiBC,MAAA,IAAuB;EAE/C,KAAAF,iBAAA,oBAAAA,iBAAA,CAAmBG,SAAA,MAAc,MAAM;IACrBH,iBAAA;EACtB;EAGI,IAAAE,MAAA,KAAW,QAAQF,iBAAA,KAAsB,MAAM;IAAE;EAAO;EAMxCA,iBAAA,GAAAD,UAAA;EACPA,UAAA,GAAAG,MAAA;AACf;AAEO,MAAME,aAAA,GAAgBA,CAAA,KAAML,UAAA;AAG5B,MAAMM,MAAA,GAAUA,CAACC,GAAA,EAAaC,KAAA,GAAa,WAAc;;EAC9D,MAAMC,eAAA,IAAkBC,EAAA,GAAAL,aAAA,CAAiB,MAAjB,gBAAAK,EAAA,CAAiBC,QAAA,CAASC,QAAA,CAASL,GAAA;EAC3D,MAAMM,EAAA,GAAKC,kBAAA;EAEX,IAAID,EAAA,EAAI;IACC,OAAAE,QAAA,CAAUR,GAAA,EAAKC,KAAK;EAC7B;EAGO,OAAAC,eAAA,IAAmBO,UAAA,CAAW,6JAA8J;AACrM"},"metadata":{},"sourceType":"module","externalDependencies":[]}