{"ast":null,"code":"import { computed } from \"vue\";\nimport { w as warn } from \"../utils/console-33a7ea8d.mjs\";\nimport { u as useCache } from \"./useCache-8f053ac4.mjs\";\nimport { u as useReactiveComputed } from \"./useReactiveComputed-2cefedc6.mjs\";\nimport { a as getBoxShadowColor, f as getBoxShadowColorFromBg, c as getHoverColor, b as getFocusColor, g as getGradientBackground, s as shiftHSLAColor, h as setHSLAColor, d as colorToRgba, j as getStateMaskGradientBackground, n as normalizeColorName, k as cssVariableName, l as isColor, m as isCSSVariable, o as getColorLightness } from \"../services/color/utils-711878eb.mjs\";\nimport { k as kebabCase } from \"../../vendor-2b2dbafd.mjs\";\nimport { u as useGlobalConfig } from \"./useGlobalConfig-43bc623b.mjs\";\nconst useColorProps = {\n  color: {\n    type: String,\n    default: \"\"\n  }\n};\nconst useColors = () => {\n  const gc = useGlobalConfig();\n  if (!gc) {\n    throw new Error(\"useColors must be used in setup function or Vuestic GlobalConfigPlugin is not registered!\");\n  }\n  const {\n    globalConfig\n  } = gc;\n  const colors = useReactiveComputed({\n    get: () => globalConfig.value.colors.presets[globalConfig.value.colors.currentPresetName],\n    set: v => {\n      setColors(v);\n    }\n  });\n  const setColors = colors2 => {\n    globalConfig.value.colors.presets[globalConfig.value.colors.currentPresetName] = {\n      ...globalConfig.value.colors.variables,\n      ...colors2\n    };\n  };\n  const getColors = () => {\n    return colors;\n  };\n  const getColor = (prop, defaultColor, preferVariables) => {\n    if (!defaultColor) {\n      defaultColor = getColors().primary;\n    }\n    if (prop === \"transparent\") {\n      return \"#ffffff00\";\n    }\n    if (prop === \"currentColor\") {\n      return prop;\n    }\n    const colors2 = getColors();\n    if (!prop) {\n      prop = getColor(defaultColor);\n    }\n    const colorValue = colors2[prop] || colors2[normalizeColorName(prop)];\n    if (colorValue) {\n      return preferVariables ? `var(${cssVariableName(prop)})` : colorValue;\n    }\n    if (isColor(prop)) {\n      return prop;\n    }\n    if (preferVariables && isCSSVariable(prop)) {\n      return prop;\n    }\n    warn(`'${prop}' is not a proper color! Use HEX or default color themes\n      names (https://vuestic.dev/en/styles/colors#default-color-themes)`);\n    return getColor(defaultColor);\n  };\n  const getComputedColor = color => {\n    return computed({\n      get() {\n        return getColor(color);\n      },\n      set(v) {\n        setColors({\n          [color]: v\n        });\n      }\n    });\n  };\n  const colorsToCSSVariable = (colors2, prefix = \"va\") => {\n    return Object.keys(colors2).filter(key => colors2[key] !== void 0).reduce((acc, colorName) => {\n      acc[`--${prefix}-${kebabCase(colorName)}`] = getColor(colors2[colorName], void 0, true);\n      acc[`--${prefix}-on-${kebabCase(colorName)}`] = getColor(getTextColor(getColor(colors2[colorName])), void 0, true);\n      return acc;\n    }, {});\n  };\n  const cache = useCache();\n  const getColorLightnessFromCache = color => {\n    if (typeof color !== \"string\") {\n      return getColorLightness(color);\n    }\n    if (!cache.colorContrast[color]) {\n      cache.colorContrast[color] = getColorLightness(color);\n    }\n    return cache.colorContrast[color];\n  };\n  const computedDarkColor = computed(() => {\n    return getColorLightnessFromCache(getColor(\"textPrimary\")) > 255 / 2 ? \"textInverted\" : \"textPrimary\";\n  });\n  const computedLightColor = computed(() => {\n    return getColorLightnessFromCache(getColor(\"textPrimary\")) > 255 / 2 ? \"textPrimary\" : \"textInverted\";\n  });\n  const getTextColor = (color, darkColor, lightColor) => {\n    darkColor = darkColor || computedDarkColor.value;\n    lightColor = lightColor || computedLightColor.value;\n    return getColorLightnessFromCache(color) > globalConfig.value.colors.threshold ? darkColor : lightColor;\n  };\n  const currentPresetName = computed({\n    get: () => globalConfig.value.colors.currentPresetName,\n    set: v => {\n      applyPreset(v);\n    }\n  });\n  const presets = computed(() => globalConfig.value.colors.presets);\n  const applyPreset = presetName => {\n    globalConfig.value.colors.currentPresetName = presetName;\n    if (!globalConfig.value.colors.presets[presetName]) {\n      return warn(`Preset ${presetName} does not exist`);\n    }\n  };\n  return {\n    colors,\n    currentPresetName,\n    presets,\n    applyPreset,\n    setColors,\n    getColors,\n    getColor,\n    getComputedColor,\n    getBoxShadowColor,\n    getBoxShadowColorFromBg,\n    getHoverColor,\n    getFocusColor,\n    getGradientBackground,\n    getTextColor,\n    shiftHSLAColor,\n    setHSLAColor,\n    colorsToCSSVariable,\n    colorToRgba,\n    getStateMaskGradientBackground\n  };\n};\nexport { useColorProps as a, useColors as u };","map":{"version":3,"names":["useColorProps","color","type","String","default","useColors","gc","useGlobalConfig","Error","globalConfig","colors","useReactiveComputed","get","value","presets","currentPresetName","set","v","setColors","colors2","variables","getColors","getColor","prop","defaultColor","preferVariables","primary","colorValue","normalizeColorName","cssVariableName","isColor","isCSSVariable","warn","getComputedColor","computed","colorsToCSSVariable","prefix","Object","keys","filter","key","reduce","acc","colorName","kebabCase","getTextColor","cache","useCache","getColorLightnessFromCache","getColorLightness","colorContrast","computedDarkColor","computedLightColor","darkColor","lightColor","threshold","applyPreset","presetName","getBoxShadowColor","getBoxShadowColorFromBg","getHoverColor","getFocusColor","getGradientBackground","shiftHSLAColor","setHSLAColor","colorToRgba","getStateMaskGradientBackground"],"sources":["../../../../src/composables/useColors.ts"],"sourcesContent":["import type { ColorVariables, CssColor } from '../services/color'\nimport { computed } from 'vue'\nimport { useGlobalConfig } from '../services/global-config/global-config'\nimport { warn } from '../utils/console'\nimport { useCache } from './useCache'\nimport { useReactiveComputed } from './useReactiveComputed'\nimport {\n  getBoxShadowColor,\n  getBoxShadowColorFromBg,\n  getHoverColor,\n  getFocusColor,\n  getGradientBackground,\n  isColor,\n  shiftHSLAColor,\n  setHSLAColor,\n  isCSSVariable,\n  colorToRgba,\n  getStateMaskGradientBackground,\n  getColorLightness,\n  cssVariableName,\n  normalizeColorName,\n  type ColorInput,\n} from '../services/color/utils'\nimport kebabCase from 'lodash/kebabCase'\n\n/**\n * You can add these props to any component by destructuring them inside props option.\n * @example\n * props: { ...useColorProps, componentsOwnProp, etc. }\n * It's better to add props at the beginning to make sure that component own props will be used instead in case of collision.\n */\nexport const useColorProps = {\n  color: {\n    type: String,\n    default: '',\n  },\n}\n\nexport const useColors = () => {\n  const gc = useGlobalConfig()\n\n  if (!gc) {\n    throw new Error('useColors must be used in setup function or Vuestic GlobalConfigPlugin is not registered!')\n  }\n\n  const { globalConfig } = gc\n\n  const colors = useReactiveComputed<ColorVariables>({\n    get: () => globalConfig.value.colors!.presets[globalConfig.value.colors!.currentPresetName],\n    set: (v: ColorVariables) => { setColors(v) },\n  })\n\n  const setColors = (colors: Partial<ColorVariables>): void => {\n    globalConfig.value.colors!.presets[globalConfig.value.colors!.currentPresetName] = {\n      ...globalConfig.value.colors.variables,\n      ...colors,\n    } as ColorVariables\n  }\n\n  const getColors = (): ColorVariables => {\n    return colors\n  }\n\n  /**\n   * Returns color from config variables by name or return prop if color is a valid hex, hsl, hsla, rgb or rgba color.\n   * @param prop - should be color name or color in hex, hsl, hsla, rgb or rgba format.\n   * @param preferVariables - function should return (if possible) CSS variable instead of hex (hex is needed to set opacity).\n   * @param defaultColor - this color will be used if prop is invalid.\n   */\n  const getColor = (prop?: string, defaultColor?: string, preferVariables?: boolean): CssColor => {\n    if (!defaultColor) {\n      /**\n       * Most default color - fallback when nothing else is found.\n       */\n      defaultColor = getColors().primary\n    }\n\n    if (prop === 'transparent') {\n      return '#ffffff00'\n    }\n\n    if (prop === 'currentColor') {\n      return prop\n    }\n\n    const colors = getColors()\n\n    if (!prop) {\n      prop = getColor(defaultColor)\n    }\n\n    const colorValue = colors[prop] || colors[normalizeColorName(prop)]\n    if (colorValue) {\n      return preferVariables ? `var(${cssVariableName(prop)})` : colorValue\n    }\n\n    if (isColor(prop)) {\n      return prop\n    }\n\n    if (preferVariables && isCSSVariable(prop)) {\n      return prop\n    }\n\n    warn(`'${prop}' is not a proper color! Use HEX or default color themes\n      names (https://vuestic.dev/en/styles/colors#default-color-themes)`)\n\n    return getColor(defaultColor)\n  }\n\n  const getComputedColor = (color: string) => {\n    return computed({\n      get () { return getColor(color) },\n      set (v: string) { setColors({ [color]: v }) },\n    })\n  }\n\n  const colorsToCSSVariable = (colors: { [colorName: string]: string | undefined }, prefix = 'va') => {\n    return Object\n      .keys(colors)\n      .filter((key) => colors[key] !== undefined)\n      .reduce((acc: Record<string, any>, colorName: string) => {\n        acc[`--${prefix}-${kebabCase(colorName)}`] = getColor(colors[colorName], undefined, true)\n        acc[`--${prefix}-on-${kebabCase(colorName)}`] = getColor(getTextColor(getColor(colors[colorName]!)), undefined, true)\n        return acc\n      }, {})\n  }\n\n  const cache = useCache()\n\n  const getColorLightnessFromCache = (color: ColorInput) => {\n    if (typeof color !== 'string') {\n      return getColorLightness(color)\n    }\n\n    if (!cache.colorContrast[color]) {\n      cache.colorContrast[color] = getColorLightness(color)\n    }\n\n    return cache.colorContrast[color]\n  }\n\n  const computedDarkColor = computed(() => {\n    return getColorLightnessFromCache(getColor('textPrimary')) > (255 / 2) ? 'textInverted' : 'textPrimary'\n  })\n\n  const computedLightColor = computed(() => {\n    return getColorLightnessFromCache(getColor('textPrimary')) > (255 / 2) ? 'textPrimary' : 'textInverted'\n  })\n\n  const getTextColor = (color: ColorInput, darkColor?: string, lightColor?: string) => {\n    darkColor = darkColor || computedDarkColor.value\n    lightColor = lightColor || computedLightColor.value\n    return getColorLightnessFromCache(color) > globalConfig.value.colors.threshold ? darkColor : lightColor\n  }\n\n  const currentPresetName = computed<string>({\n    get: () => globalConfig.value.colors!.currentPresetName,\n    set: (v: string) => { applyPreset(v) },\n  })\n  const presets = computed(() => globalConfig.value.colors!.presets)\n\n  const applyPreset = (presetName: string) => {\n    globalConfig.value.colors!.currentPresetName = presetName\n    if (!globalConfig.value.colors!.presets[presetName]) {\n      return warn(`Preset ${presetName} does not exist`)\n    }\n  }\n\n  return {\n    colors,\n    currentPresetName,\n    presets,\n    applyPreset,\n    setColors,\n    getColors,\n    getColor,\n    getComputedColor,\n    getBoxShadowColor,\n    getBoxShadowColorFromBg,\n    getHoverColor,\n    getFocusColor,\n    getGradientBackground,\n    getTextColor,\n    shiftHSLAColor,\n    setHSLAColor,\n    colorsToCSSVariable,\n    colorToRgba,\n    getStateMaskGradientBackground,\n  }\n}\n\nexport * from '../services/color/utils'\nexport * from '../services/color'\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}