{"ast":null,"code":"import { a as renderSlotNode } from \"./headless-b51e0704.mjs\";\nimport { defineComponent } from \"vue\";\nconst WithAttributes = defineComponent({\n  name: \"SlotWithAttributes\",\n  props: {\n    attrs: {\n      type: Object\n    }\n  },\n  render() {\n    var _a;\n    return renderSlotNode(this.$slots.default, null, this.$props.attrs || ((_a = this.$parent) == null ? void 0 : _a.$attrs));\n  }\n});\nexport { WithAttributes as W };","map":{"version":3,"names":["WithAttributes","defineComponent","name","props","attrs","type","Object","render","renderSlotNode","$slots","default","$props","_a","$parent","$attrs"],"sources":["../../../../src/utils/with-attributes.ts"],"sourcesContent":["import { renderSlotNode } from './headless'\nimport { defineComponent } from 'vue'\n\n/**\n * Render slot node with attributes\n *\n * If your component has multiple root elements, vue will not pass attributes automatically.\n * With `WithAttributes` you can wrap element that must be rendered with attributes.\n * You can also specify attributes manually using `attrs` prop.\n *\n * @notice slot can be wrapped, then attributes will be passed to the element rendered in slot\n *\n * @example\n *\n * ```\n * <template>\n *   <WithAttributes>\n *     <slot />\n *   </WithAttributes>\n *   <div>\n *     Hello message below!\n *   </div>\n * ```\n */\nexport const WithAttributes = defineComponent({\n  name: 'SlotWithAttributes',\n\n  props: {\n    attrs: { type: Object },\n  },\n\n  render () {\n    return renderSlotNode(this.$slots.default, null, this.$props.attrs || this.$parent?.$attrs)\n  },\n})\n"],"mappings":";;AAwBO,MAAMA,cAAA,GAAiBC,eAAA,CAAgB;EAC5CC,IAAA,EAAM;EAENC,KAAA,EAAO;IACLC,KAAA,EAAO;MAAEC,IAAA,EAAMC;IAAO;EACxB;EAEAC,OAAA,EAAU;;IACD,OAAAC,cAAA,CAAe,KAAKC,MAAA,CAAOC,OAAA,EAAS,MAAM,KAAKC,MAAA,CAAOP,KAAA,MAASQ,EAAA,QAAKC,OAAA,KAAL,gBAAAD,EAAA,CAAcE,MAAA,CAAM;EAC5F;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}