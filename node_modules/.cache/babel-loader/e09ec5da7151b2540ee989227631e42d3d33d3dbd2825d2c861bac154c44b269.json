{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, watch, provide, computed, inject, onMounted, onBeforeUnmount } from \"vue\";\nconst AccordionServiceKey = Symbol(\"AccordionService\");\nconst useAccordion = (props, state) => {\n  const items = ref([]);\n  const onItemMounted = item => {\n    items.value.push(item);\n  };\n  const onItemUnmounted = item => {\n    items.value = items.value.filter(i => i !== item);\n  };\n  const getItemValue = item => {\n    return state.value[items.value.indexOf(item)] ?? false;\n  };\n  const setItemValue = (item, value) => {\n    const index = items.value.indexOf(item);\n    if (index === -1) {\n      return;\n    }\n    if (!props.multiple) {\n      state.value = state.value.map((el, i) => {\n        if (i === index) {\n          return value;\n        }\n        return false;\n      });\n    } else {\n      state.value[index] = value;\n    }\n  };\n  watch(items, newItems => {\n    state.value = newItems.map(item => getItemValue(item));\n  }, {\n    deep: true\n  });\n  provide(AccordionServiceKey, {\n    isInsideAccordion: true,\n    onItemMounted,\n    onItemUnmounted,\n    getItemValue,\n    setItemValue,\n    props: computed(() => props)\n  });\n  return {\n    items\n  };\n};\nconst useAccordionItem = () => {\n  const accordion = inject(AccordionServiceKey, void 0);\n  if (!accordion) {\n    return {\n      accordionProps: ref({})\n    };\n  }\n  const item = {};\n  onMounted(() => accordion.onItemMounted(item));\n  onBeforeUnmount(() => accordion.onItemUnmounted(item));\n  const valueProxy = computed({\n    get: () => accordion.getItemValue(item),\n    set: value => accordion.setItemValue(item, value)\n  });\n  return {\n    valueProxy,\n    accordionProps: accordion.props\n  };\n};\nexport { useAccordionItem as a, useAccordion as u };","map":{"version":3,"names":["AccordionServiceKey","Symbol","useAccordion","props","state","items","ref","onItemMounted","item","value","push","onItemUnmounted","filter","i","getItemValue","indexOf","setItemValue","index","multiple","map","el","watch","newItems","deep","provide","isInsideAccordion","computed","useAccordionItem","accordion","inject","accordionProps","onMounted","onBeforeUnmount","valueProxy","get","set"],"sources":["../../../../../../src/components/va-accordion/hooks/useAccordion.ts"],"sourcesContent":["import { computed, inject, onBeforeUnmount, onMounted, provide, Ref, ref, watch, WritableComputedRef } from 'vue'\n\nexport const AccordionServiceKey = Symbol('AccordionService')\n\nexport interface AccordionItemProps {\n  inset?: boolean,\n  popout?: boolean\n}\n\nexport interface AccordionProps extends AccordionItemProps {\n  modelValue: boolean[],\n  multiple: boolean,\n}\n\nexport type AccordionItem = {}\n\nexport interface AccordionInject {\n  onItemMounted: (item: AccordionItem) => void,\n  onItemUnmounted: (item: AccordionItem) => void,\n  getItemValue: (item: AccordionItem) => boolean,\n  setItemValue: (item: AccordionItem, value: boolean) => void,\n  props: Ref<AccordionItemProps>,\n}\n\n/**\n * @param props\n * @param state array of states of all accordion items */\nexport const useAccordion = (props: AccordionProps, state: WritableComputedRef<boolean[]>) => {\n  /** @notice items are reactive because they have reactive `state` inside */\n  const items = ref<AccordionItem[]>([])\n\n  const onItemMounted = (item: AccordionItem) => { items.value.push(item) }\n  const onItemUnmounted = (item: AccordionItem) => { items.value = items.value.filter((i) => i !== item) }\n\n  const getItemValue = (item: AccordionItem) => {\n    return state.value[items.value.indexOf(item)] ?? false\n  }\n\n  const setItemValue = (item: AccordionItem, value: boolean) => {\n    const index = items.value.indexOf(item)\n    if (index === -1) { return }\n\n    if (!props.multiple) {\n      state.value = state.value.map((el, i) => {\n        if (i === index) { return value }\n        return false\n      })\n    } else {\n      state.value[index] = value\n    }\n  }\n\n  watch(items, (newItems) => {\n    state.value = newItems.map((item) => getItemValue(item))\n  }, { deep: true })\n\n  provide(AccordionServiceKey, {\n    isInsideAccordion: true,\n    onItemMounted,\n    onItemUnmounted,\n    getItemValue,\n    setItemValue,\n    props: computed(() => props),\n  })\n\n  return { items }\n}\n\n/**\n * Hook used in items that should react on VaAccordion changes\n * @param state shows if accordion item is open\n */\nexport const useAccordionItem = () => {\n  const accordion = inject<AccordionInject | undefined>(AccordionServiceKey, undefined)\n\n  if (!accordion) {\n    return { accordionProps: ref({} as AccordionProps) }\n  }\n\n  const item = {}\n\n  onMounted(() => accordion.onItemMounted(item))\n  onBeforeUnmount(() => accordion.onItemUnmounted(item))\n\n  const valueProxy = computed({\n    get: () => accordion.getItemValue(item),\n    set: (value) => accordion.setItemValue(item, value),\n  })\n\n  return {\n    valueProxy,\n    accordionProps: accordion.props,\n  }\n}\n"],"mappings":";;AAEa,MAAAA,mBAAA,GAAsBC,MAAA,CAAO,kBAAkB;AAyB/C,MAAAC,YAAA,GAAeA,CAACC,KAAA,EAAuBC,KAAA,KAA0C;EAEtF,MAAAC,KAAA,GAAQC,GAAA,CAAqB,EAAE;EAE/B,MAAAC,aAAA,GAAiBC,IAAA,IAAwB;IAAQH,KAAA,CAAAI,KAAA,CAAMC,IAAA,CAAKF,IAAI;EAAA;EAChE,MAAAG,eAAA,GAAmBH,IAAA,IAAwB;IAAEH,KAAA,CAAMI,KAAA,GAAQJ,KAAA,CAAMI,KAAA,CAAMG,MAAA,CAAQC,CAAA,IAAMA,CAAA,KAAML,IAAI;EAAA;EAE/F,MAAAM,YAAA,GAAgBN,IAAA,IAAwB;IAC5C,OAAOJ,KAAA,CAAMK,KAAA,CAAMJ,KAAA,CAAMI,KAAA,CAAMM,OAAA,CAAQP,IAAI,CAAC,KAAK;EAAA;EAG7C,MAAAQ,YAAA,GAAeA,CAACR,IAAA,EAAqBC,KAAA,KAAmB;IAC5D,MAAMQ,KAAA,GAAQZ,KAAA,CAAMI,KAAA,CAAMM,OAAA,CAAQP,IAAI;IACtC,IAAIS,KAAA,KAAU,IAAI;MAAE;IAAO;IAEvB,KAACd,KAAA,CAAMe,QAAA,EAAU;MACnBd,KAAA,CAAMK,KAAA,GAAQL,KAAA,CAAMK,KAAA,CAAMU,GAAA,CAAI,CAACC,EAAA,EAAIP,CAAA,KAAM;QACvC,IAAIA,CAAA,KAAMI,KAAA,EAAO;UAAS,OAAAR,KAAA;QAAM;QACzB;MAAA,CACR;IAAA,OACI;MACCL,KAAA,CAAAK,KAAA,CAAMQ,KAAK,IAAIR,KAAA;IACvB;EAAA;EAGIY,KAAA,CAAAhB,KAAA,EAAQiB,QAAA,IAAa;IACzBlB,KAAA,CAAMK,KAAA,GAAQa,QAAA,CAASH,GAAA,CAAKX,IAAA,IAASM,YAAA,CAAaN,IAAI,CAAC;EAAA,GACtD;IAAEe,IAAA,EAAM;EAAA,CAAM;EAEjBC,OAAA,CAAQxB,mBAAA,EAAqB;IAC3ByB,iBAAA,EAAmB;IACnBlB,aAAA;IACAI,eAAA;IACAG,YAAA;IACAE,YAAA;IACAb,KAAA,EAAOuB,QAAA,CAAS,MAAMvB,KAAK;EAAA,CAC5B;EAED,OAAO;IAAEE;EAAM;AACjB;AAMO,MAAMsB,gBAAA,GAAmBA,CAAA,KAAM;EAC9B,MAAAC,SAAA,GAAYC,MAAA,CAAoC7B,mBAAA,EAAqB,MAAS;EAEpF,IAAI,CAAC4B,SAAA,EAAW;IACd,OAAO;MAAEE,cAAA,EAAgBxB,GAAA,CAAI,EAAoB;IAAE;EACrD;EAEA,MAAME,IAAA,GAAO;EAEbuB,SAAA,CAAU,MAAMH,SAAA,CAAUrB,aAAA,CAAcC,IAAI,CAAC;EAC7CwB,eAAA,CAAgB,MAAMJ,SAAA,CAAUjB,eAAA,CAAgBH,IAAI,CAAC;EAErD,MAAMyB,UAAA,GAAaP,QAAA,CAAS;IAC1BQ,GAAA,EAAKA,CAAA,KAAMN,SAAA,CAAUd,YAAA,CAAaN,IAAI;IACtC2B,GAAA,EAAM1B,KAAA,IAAUmB,SAAA,CAAUZ,YAAA,CAAaR,IAAA,EAAMC,KAAK;EAAA,CACnD;EAEM;IACLwB,UAAA;IACAH,cAAA,EAAgBF,SAAA,CAAUzB;EAAA;AAE9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}