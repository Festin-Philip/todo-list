{"ast":null,"code":"import { _ as _sfc_main } from \"./VaTextarea.vue_vue_type_script_lang-d8042896.mjs\";\nimport { resolveComponent, openBlock, createBlock, mergeProps, withCtx, createElementVNode, normalizeClass, withDirectives, vModelText } from \"vue\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nconst VaTextarea_vue_vue_type_style_index_0_lang = \"\";\nconst _hoisted_1 = [\"rows\", \"loading\", \"ariaLabel\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_VaInputWrapper = resolveComponent(\"VaInputWrapper\");\n  return openBlock(), createBlock(_component_VaInputWrapper, mergeProps({\n    class: \"va-textarea\"\n  }, _ctx.vaInputWrapperProps, {\n    error: _ctx.computedError,\n    \"error-messages\": _ctx.computedErrorMessages\n  }), {\n    default: withCtx(() => [createElementVNode(\"div\", {\n      class: normalizeClass([\"va-textarea__resize-wrapper\", {\n        \"va-textarea__resize-wrapper--resizable\": _ctx.isResizable\n      }])\n    }, [withDirectives(createElementVNode(\"textarea\", mergeProps({\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.valueComputed = $event)\n    }, {\n      ..._ctx.computedProps,\n      ..._ctx.listeners,\n      ..._ctx.validationAriaAttributes\n    }, {\n      style: _ctx.computedStyle,\n      rows: _ctx.computedRowsCount,\n      loading: _ctx.isLoading,\n      ref: \"textarea\",\n      ariaLabel: _ctx.$props.label,\n      class: \"va-textarea__textarea\",\n      onFocus: _cache[1] || (_cache[1] = (...args) => _ctx.validationListeners.onFocus && _ctx.validationListeners.onFocus(...args)),\n      onBlur: _cache[2] || (_cache[2] = (...args) => _ctx.validationListeners.onBlur && _ctx.validationListeners.onBlur(...args))\n    }), null, 16, _hoisted_1), [[vModelText, _ctx.valueComputed]])], 2)]),\n    _: 1\n  }, 16, [\"error\", \"error-messages\"]);\n}\nconst _VaTextarea = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { _VaTextarea as _ };\nimport '../../../VaTextarea.css';","map":{"version":3,"names":["_component_VaInputWrapper","resolveComponent","openBlock","createBlock","mergeProps","class","_ctx","vaInputWrapperProps","error","computedError","computedErrorMessages","default","withCtx","createElementVNode","normalizeClass","withDirectives","_cache","$event","valueComputed","computedProps","listeners","validationAriaAttributes","style","computedStyle","rows","computedRowsCount","loading","isLoading","ref","ariaLabel","$props","label","onFocus","args","validationListeners","onBlur","_hoisted_1","vModelText"],"sources":["../../../../../src/components/va-textarea/VaTextarea.vue"],"sourcesContent":["<template>\n  <VaInputWrapper\n    class=\"va-textarea\"\n    v-bind=\"vaInputWrapperProps\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n  >\n    <div class=\"va-textarea__resize-wrapper\" :class=\"{\n      'va-textarea__resize-wrapper--resizable': isResizable,\n    }\">\n      <textarea\n        v-model=\"valueComputed\"\n        v-bind=\"{ ...computedProps, ...listeners, ...validationAriaAttributes }\"\n        :style=\"computedStyle\"\n        :rows=\"computedRowsCount\"\n        :loading=\"isLoading\"\n        ref=\"textarea\"\n        :ariaLabel=\"$props.label\"\n        class=\"va-textarea__textarea\"\n        @focus=\"validationListeners.onFocus\"\n        @blur=\"validationListeners.onBlur\"\n      />\n    </div>\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, CSSProperties, shallowRef } from 'vue'\nimport pick from 'lodash/pick.js'\nimport { VaInputWrapper } from '../va-input-wrapper'\n\nimport { useFormFieldProps, useEmitProxy, useStateful, useStatefulProps, useValidation, useValidationProps, useValidationEmits } from '../../composables'\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\nimport { blurElement, focusElement } from '../../utils/focus'\n\nconst positiveNumberValidator = (val: number) => {\n  if (val > 0 && (val | 0) === val) {\n    return true\n  }\n  throw new Error(`\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`)\n}\n\nconst { createEmits, createListeners } = useEmitProxy([\n  'input', 'change', 'click', 'update:modelValue',\n])\n\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper)\n\nexport default defineComponent({\n  name: 'VaTextarea',\n\n  components: { VaInputWrapper },\n\n  props: {\n    ...useFormFieldProps,\n    ...VaInputWrapperProps,\n    ...useStatefulProps,\n    ...useValidationProps,\n    modelValue: { type: [String, Number], default: '' },\n    placeholder: { type: String },\n    autosize: { type: Boolean, default: false },\n    minRows: {\n      type: Number,\n      default: 1,\n      validator: positiveNumberValidator,\n    },\n    maxRows: {\n      type: Number,\n      validator: positiveNumberValidator,\n    },\n    resize: {\n      type: Boolean,\n      default: true,\n    },\n    clearValue: {\n      type: [String],\n      default: '',\n    },\n  },\n\n  emits: [...createEmits(), ...useValidationEmits],\n\n  setup (props, { emit }) {\n    const textarea = shallowRef<HTMLTextAreaElement>()\n    const { valueComputed } = useStateful(props, emit, 'modelValue', {\n      defaultValue: '',\n    })\n\n    const focus = () => {\n      focusElement(textarea.value)\n    }\n\n    const blur = () => {\n      blurElement(textarea.value)\n    }\n\n    const reset = () => withoutValidation(() => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n      resetValidation()\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners: validationListeners,\n      validationAriaAttributes,\n      isLoading,\n      resetValidation,\n      withoutValidation,\n    } = useValidation(props, emit, {\n      value: valueComputed,\n      focus,\n      reset,\n    })\n\n    const isResizable = computed(() => {\n      return props.resize && !props.autosize\n    })\n\n    const computedRowsCount = computed<number | undefined>(() => {\n      if (!props.autosize) {\n        return undefined\n      }\n\n      const rows = valueComputed.value.toString().split('\\n').length\n\n      if (!props.maxRows) {\n        return rows\n      }\n\n      return Math.max(props.minRows, Math.min(rows, props.maxRows))\n    })\n\n    const computedStyle = computed(() => ({\n      resize: isResizable.value ? undefined : 'none',\n    }) as CSSProperties)\n\n    const computedProps = computed(() => ({\n      ...pick(props, ['disabled', 'readonly', 'placeholder', 'ariaLabel']),\n    }))\n\n    return {\n      isResizable,\n      validationListeners,\n      validationAriaAttributes,\n      computedError,\n      computedErrorMessages,\n      isLoading,\n      computedRowsCount,\n      valueComputed,\n      vaInputWrapperProps: filterComponentProps(VaInputWrapperProps),\n      textarea,\n      computedStyle,\n      listeners: createListeners(emit),\n      computedProps,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources/index.scss';\n\n.va-textarea {\n  .va-input-wrapper__field {\n    padding-top: 12px;\n    padding-bottom: 12px;\n    align-items: flex-start;\n  }\n\n  &__resize-wrapper {\n    display: flex;\n    overflow: hidden;\n    width: 100%;\n\n    &--resizable {\n      resize: vertical;\n    }\n  }\n\n  &__textarea {\n    border: 0;\n    flex: 1;\n    font-family: var(--va-font-family);\n    width: 100%;\n    padding: 1px 0;\n    margin: -1px 0;\n    background: transparent;\n    color: currentColor;\n    box-sizing: content-box;\n    min-height: 1.15rem;\n    outline: none;\n    position: relative;\n    resize: none;\n\n    @include va-scroll(var(--va-secondary));\n  }\n}\n</style>\n"],"mappings":";;;;;;EACE,MAAAA,yBAAA,GAAAC,gBAAA,CAsBiB,gBAtBjB;EAIG,OAAAC,SAAA,IAAgBC,WAAA,CAAqBH,yBAAA,EAAAI,UAAA;IAAAC,KAAA;EAAA,GAAAC,IAAA,CAAAC,mBAAA;IAAAC,KAAA,EAAAF,IAAA,CAAAG,aAAA;IAAA,kBAEtCH,IAAA,CAeMI;EAAA,CAfN;IAAUC,OAAA,EAAAC,OAAA,QAAAC,kBAAA;MAAAR,KAAA,EAAAS,cAAA;;;QAKOC,cAAA,CAAAF,kBAAA,CAAkB,YAAST,UAAA,CAAK;MAC5C,uBAAOY,MAAA,CAAa,OAAAA,MAAA,MAAAC,MAAA,IAAAX,IAAA,CAAAY,aAAA,GAAAD,MAAA;IAAA,GACpB;MAAA,GAAMX,IAAA,CAAiBa,aAAA;MAAA,GAAAb,IAAA,CAAAc,SAAA;MAAA,GAAAd,IAAA,CAAAe;IAAA;MACvBC,KAAA,EAAOhB,IAAA,CAAEiB,aAAA;MACVC,IAAA,EAAIlB,IAAA,CAAAmB,iBAAA;MACHC,OAAA,EAASpB,IAAA,CAAEqB,SAAA;MACZC,GAAA,EAAK;MACJC,SAAA,EAAKvB,IAAA,CAAAwB,MAAA,CAAAC,KAAA;MACL1B,KAAA,EAAI;MAAA2B,OAAA,EAAAhB,MAAA,QAAAA,MAAA,UAAAiB,IAAA,KAAA3B,IAAA,CAAA4B,mBAAA,CAAAF,OAAA,IAAA1B,IAAA,CAAA4B,mBAAA,CAAAF,OAAA,IAAAC,IAAA;MAAAE,MAAA,EAAAnB,MAAA,CATI,CAAa,MAAAA,MAAA,UAAAiB,IAAA,KAAA3B,IAAA,CAAA4B,mBAAA,CAAAC,MAAA,IAAA7B,IAAA,CAAA4B,mBAAA,CAAAC,MAAA,IAAAF,IAAA;IAAA,cAAAG,UAAA,KAAAC,UAAA,EAAA/B,IAAA,CAAAY,aAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}