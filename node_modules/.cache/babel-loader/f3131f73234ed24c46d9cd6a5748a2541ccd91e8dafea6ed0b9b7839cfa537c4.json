{"ast":null,"code":"import { _ as _sfc_main } from \"./VaInput.vue_vue_type_script_lang-85195241.mjs\";\nimport { resolveComponent, openBlock, createBlock, mergeProps, createSlots, withCtx, withModifiers, withKeys, createCommentVNode, renderSlot, normalizeProps, guardReactiveProps, createElementBlock, renderList } from \"vue\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper-cc2b3d55.mjs\";\nconst _hoisted_1 = [\"value\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_icon = resolveComponent(\"va-icon\");\n  const _component_va_input_wrapper = resolveComponent(\"va-input-wrapper\");\n  return openBlock(), createBlock(_component_va_input_wrapper, mergeProps({\n    ..._ctx.fieldListeners,\n    ..._ctx.wrapperProps\n  }, {\n    class: [\"va-input\", _ctx.$attrs.class],\n    style: _ctx.$attrs.style,\n    loading: _ctx.$props.loading || _ctx.isLoading,\n    error: _ctx.computedError,\n    \"error-messages\": _ctx.computedErrorMessages,\n    \"error-count\": _ctx.errorCount,\n    \"counter-value\": _ctx.valueLengthComputed,\n    onClick: _ctx.focus\n  }), createSlots({\n    icon: withCtx(slotScope => [_ctx.canBeCleared ? (openBlock(), createBlock(_component_va_icon, mergeProps({\n      key: 0,\n      role: \"button\",\n      \"aria-label\": _ctx.tp(_ctx.$props.ariaResetLabel)\n    }, _ctx.clearIconProps, {\n      onClick: withModifiers(_ctx.reset, [\"stop\"]),\n      onKeydown: [withKeys(withModifiers(_ctx.reset, [\"stop\"]), [\"enter\"]), withKeys(withModifiers(_ctx.reset, [\"stop\"]), [\"space\"])]\n    }), null, 16, [\"aria-label\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, \"icon\", normalizeProps(guardReactiveProps(slotScope)))]),\n    default: withCtx(() => [!_ctx.$slots.content ? (openBlock(), createElementBlock(\"input\", mergeProps({\n      key: 0,\n      ref: \"input\",\n      class: \"va-input__content__input\"\n    }, {\n      ..._ctx.computedInputAttributes,\n      ..._ctx.inputEvents\n    }, {\n      value: _ctx.computedValue\n    }), null, 16, _hoisted_1)) : createCommentVNode(\"\", true)]),\n    _: 2\n  }, [renderList(_ctx.filterSlots, name => {\n    return {\n      name,\n      fn: withCtx(slotScope => [renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotScope)))])\n    };\n  })]), 1040, [\"class\", \"style\", \"loading\", \"error\", \"error-messages\", \"error-count\", \"counter-value\", \"onClick\"]);\n}\nconst _VaInput = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { _VaInput as _ };","map":{"version":3,"names":["resolveComponent","openBlock","createBlock","_component_va_input_wrapper","mergeProps","_ctx","fieldListeners","wrapperProps","class","$attrs","style","loading","$props","isLoading","error","computedError","computedErrorMessages","errorCount","valueLengthComputed","onClick","focus","createSlots","icon","withCtx","slotScope","canBeCleared","_component_va_icon","key","role","tp","ariaResetLabel","clearIconProps","withModifiers","reset","onKeydown","withKeys","createCommentVNode","renderSlot","$slots","normalizeProps","guardReactiveProps","default","content","createElementBlock","ref","filterSlots","name"],"sources":["../../../../../src/components/va-input/VaInput.vue"],"sourcesContent":["<template>\n  <va-input-wrapper\n    v-bind=\"{\n      ...fieldListeners,\n      ...wrapperProps,\n    }\"\n    class=\"va-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    :loading=\"$props.loading || isLoading\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n    :counter-value=\"valueLengthComputed\"\n    @click=\"focus\"\n  >\n    <!-- Simply proxy slots to VaInputWrapper -->\n    <template\n      v-for=\"name in filterSlots\"\n      :key=\"name\"\n      v-slot:[name]=\"slotScope\"\n    >\n      <slot :name=\"name\" v-bind=\"slotScope\" />\n    </template>\n\n    <template #icon=\"slotScope\">\n      <va-icon\n        v-if=\"canBeCleared\"\n        role=\"button\"\n        :aria-label=\"tp($props.ariaResetLabel)\"\n        v-bind=\"clearIconProps\"\n        @click.stop=\"reset\"\n        @keydown.enter.stop=\"reset\"\n        @keydown.space.stop=\"reset\"\n      />\n      <slot name=\"icon\" v-bind=\"slotScope\" />\n    </template>\n\n    <input\n      v-if=\"!$slots.content\"\n      ref=\"input\"\n      class=\"va-input__content__input\"\n      v-bind=\"{ ...computedInputAttributes, ...inputEvents }\"\n      :value=\"computedValue\"\n    >\n  </va-input-wrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, shallowRef, toRefs } from 'vue'\nimport omit from 'lodash/omit.js'\nimport pick from 'lodash/pick.js'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\n\nimport {\n  useComponentPresetProp,\n  useFormFieldProps,\n  useValidation, useValidationProps, useValidationEmits, ValidationProps,\n  useEmitProxy,\n  useClearable, useClearableProps, useClearableEmits,\n  useTranslation,\n  useStateful, useStatefulProps, useStatefulEmits, useDeprecatedCondition,\n  useFocusable, useFocusableProps,\n} from '../../composables'\nimport { useCleave, useCleaveProps } from './hooks/useCleave'\n\nimport type { AnyStringPropType } from '../../utils/types/prop-type'\n\nimport { VaInputWrapper } from '../va-input-wrapper'\nimport { VaIcon } from '../va-icon'\nimport { combineFunctions } from '../../utils/combine-functions'\n\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper)\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change', 'keyup', 'keypress', 'keydown', 'focus', 'blur', 'input'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  'click',\n  'click-prepend',\n  'click-append',\n  'click-prepend-inner',\n  'click-append-inner',\n])\n\nexport default defineComponent({\n  name: 'VaInput',\n\n  components: { VaInputWrapper, VaIcon },\n\n  props: {\n    ...VaInputWrapperProps,\n    ...useFormFieldProps,\n    ...useFocusableProps,\n    ...useValidationProps as ValidationProps<string>,\n    ...useClearableProps,\n    ...useCleaveProps,\n    ...useComponentPresetProp,\n    ...useStatefulProps,\n\n    // input\n    placeholder: { type: String, default: '' },\n    tabindex: { type: [String, Number], default: 0 },\n    modelValue: { type: [String, Number] },\n    type: { type: String as AnyStringPropType<'text' | 'password'>, default: 'text' },\n    inputClass: { type: String, default: '' },\n    pattern: { type: String },\n    inputmode: { type: String, default: 'text' },\n    counter: { type: Boolean, default: false },\n\n    // style\n    ariaResetLabel: { type: String, default: '$t:reset' },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...useValidationEmits,\n    ...useClearableEmits,\n    ...createInputEmits(),\n    ...createFieldEmits(),\n    ...useStatefulEmits,\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    useDeprecatedCondition([\n      () => props.type !== 'textarea' || 'Use VaTextarea component instead of VaInput with type=\"textarea\"',\n    ])\n\n    const input = shallowRef<HTMLInputElement>()\n\n    const { valueComputed } = useStateful(props, emit, 'modelValue', { defaultValue: '' })\n\n    const reset = () => withoutValidation(() => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n      resetValidation()\n    })\n\n    const { focus, blur } = useFocusable(input, props)\n\n    const filterSlots = computed(() => {\n      const iconSlot = ['icon']\n      return Object.keys(slots).filter(slot => !iconSlot.includes(slot))\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners: validationListeners,\n      validationAriaAttributes,\n      isLoading,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus, value: valueComputed })\n\n    const { modelValue } = toRefs(props)\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, modelValue, input, computedError)\n\n    const { computedValue, onInput } = useCleave(input, props, valueComputed)\n\n    const inputListeners = createInputListeners(emit)\n\n    /** Combine EmitProxy events with validation events to avoid events overriding */\n    const onFocus = (e: Event) => {\n      inputListeners.onFocus(e)\n      validationListeners.onFocus()\n    }\n\n    const onBlur = (e: Event) => {\n      inputListeners.onBlur(e)\n      validationListeners.onBlur()\n    }\n\n    const inputEvents = {\n      ...inputListeners,\n      onFocus: combineFunctions(onFocus, inputListeners.onFocus),\n      onBlur: combineFunctions(onBlur, inputListeners.onBlur),\n      onInput: combineFunctions(onInput, inputListeners.onInput),\n    }\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\n\n    const computedChildAttributes = computed(() => ({\n      'aria-label': props.inputAriaLabel || props.label,\n      'aria-labelledby': props.inputAriaLabelledby,\n      'aria-required': props.requiredMark,\n      tabindex: tabIndexComputed.value,\n      class: props.inputClass,\n      'aria-disabled': props.disabled,\n      'aria-readonly': props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit(attrs, ['class', 'style']),\n    }) as InputHTMLAttributes)\n\n    const computedInputAttributes = computed(() => ({\n      ...computedChildAttributes.value,\n      ...pick(props, ['type', 'disabled', 'readonly', 'placeholder', 'pattern', 'inputmode', 'minlength', 'maxlength']),\n    }) as InputHTMLAttributes)\n\n    const valueLengthComputed = computed(() =>\n      props.counter && typeof computedValue.value === 'string' ? computedValue.value.length : undefined,\n    )\n\n    return {\n      ...useTranslation(),\n      input,\n      inputEvents,\n      isLoading,\n\n      valueLengthComputed,\n      computedChildAttributes,\n      computedInputAttributes,\n      wrapperProps: filterComponentProps(VaInputWrapperProps),\n      computedValue,\n      tabIndexComputed,\n\n      // Validations\n      computedError,\n      computedErrorMessages,\n\n      // Icon\n      canBeCleared,\n      clearIconProps,\n\n      fieldListeners: createFieldListeners(emit),\n      filterSlots,\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n"],"mappings":";;;;;;sCA6CqBA,gBAAA,CA5CnB;SAC8CC,SAAA,CAAY,GAAAC,WAAA,CAAAC,2BAAA,EAAAC,UAAA;IAAA,GAAAC,IAAA,CAAAC,cAAA;IAIxD,GAAKD,IAAA,CAACE;EAAA,GAEL;IACAC,KAAA,EAAO,CAAQ,YAAAH,IAAA,CAACI,MAAA,CAAWD,KAAA;IAC3BE,KAAA,EAAOL,IAAA,CAAAI,MAAA,CAAAC,KAAA;IACPC,OAAA,EAAgBN,IAAA,CAAAO,MAAA,CAAAD,OAAA,IAAAN,IAAA,CAAAQ,SAAA;IAChBC,KAAA,EAAAT,IAAA,CAAAU,aAAA;IACA,kBAAeV,IAAA,CAAAW,qBAAA;IACf,eAAOX,IAAA,CAAKY,UAAA;IAAA,iBAAAZ,IAAA,CAAAa,mBAAA;IAWFC,OAAA,EAAId,IAAA,CAAAe;EAEL,IAAAC,WAAA;IADRC,IAAA,EAAAC,OAAA,CAAAC,SAAA,KAAAnB,IAAA,CAAAoB,YAAA,IAAAxB,SAAA,IAEeC,WAAA,CAAAwB,kBAAA,EAAAtB,UAAA;MACZuB,GAAA;MACOC,IAAA;MACP,cAAKvB,IAAA,CAAAwB,EAAA,CAAAxB,IAAA,CAAOO,MAAA,CAAKkB,cAAA;IAAA,GACjBzB,IAAA,CAAO0B,cAAA;MAAAZ,OAAA,EAAAa,aAAA,CAAA3B,IAAA,CAAa4B,KAAA,EAAK;MAAAC,SAAA,GAAAC,QAAA,CAAAH,aAAA,CAAA3B,IAAA,CAAA4B,KAAA,yB;IAGW,yDAAAG,kBAAA,YASxCC,UAAA,CAAAhC,IAAA,CAAAiC,MAAA,UAAAC,cAAA,CAAAC,kBAAA,CAAAhB,SAAA;IANDiB,OAAA,EAAAlB,OAAA,SAAAlB,IAAA,CAAAiC,MAAA,CAAAI,OAAA,IAAAzC,SAAA,IAEa0C,kBAAA,UAAAvC,UAAA;MACXuB,GAAA,EAAK;MAAAiB,GAAA;MAAApC,KAAA;;;;;;;;iBArBEH,IAAA,CAAMwC,WAAA,EAAAC,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}