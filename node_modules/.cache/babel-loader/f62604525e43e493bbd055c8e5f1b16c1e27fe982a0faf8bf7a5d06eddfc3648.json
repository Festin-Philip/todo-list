{"ast":null,"code":"import { onMounted } from \"vue\";\nimport { f as focusElement, b as blurElement } from \"../utils/focus-685f6da0.mjs\";\nimport { u as unwrapEl } from \"../utils/unwrapEl-4d79d250.mjs\";\nconst useFocusableProps = {\n  /** Focus element when mounted */\n  autofocus: {\n    type: Boolean,\n    default: false\n  }\n};\nconst useFocusable = (el, props) => {\n  const focus = () => {\n    focusElement(unwrapEl(el.value));\n  };\n  const blur = () => {\n    blurElement(unwrapEl(el.value));\n  };\n  onMounted(() => {\n    if (props.autofocus) {\n      focus();\n    }\n  });\n  return {\n    focus,\n    blur\n  };\n};\nexport { useFocusable as a, useFocusableProps as u };","map":{"version":3,"names":["useFocusableProps","autofocus","type","Boolean","default","useFocusable","el","props","focus","focusElement","unwrapEl","value","blur","blurElement","onMounted"],"sources":["../../../../src/composables/useFocusable.ts"],"sourcesContent":["import { ExtractPropTypes, Ref, onMounted } from 'vue'\nimport { blurElement, focusElement } from '../utils/focus'\nimport { unwrapEl } from '../utils/unwrapEl'\n\nexport const useFocusableProps = {\n  /** Focus element when mounted */\n  autofocus: { type: Boolean, default: false },\n}\n\n// TODO: Maybe accept a component here\nexport const useFocusable = (\n  el: Ref<HTMLElement | null | undefined>,\n  props: ExtractPropTypes<typeof useFocusableProps>,\n) => {\n  const focus = () => {\n    focusElement(unwrapEl(el.value))\n  }\n\n  const blur = () => {\n    blurElement(unwrapEl(el.value))\n  }\n\n  onMounted(() => {\n    if (props.autofocus) {\n      focus()\n    }\n  })\n\n  return {\n    focus,\n    blur,\n  }\n}\n"],"mappings":";;;AAIO,MAAMA,iBAAA,GAAoB;EAAA;EAE/BC,SAAA,EAAW;IAAEC,IAAA,EAAMC,OAAA;IAASC,OAAA,EAAS;EAAM;AAC7C;AAGa,MAAAC,YAAA,GAAeA,CAC1BC,EAAA,EACAC,KAAA,KACG;EACH,MAAMC,KAAA,GAAQA,CAAA,KAAM;IACLC,YAAA,CAAAC,QAAA,CAASJ,EAAA,CAAGK,KAAK,CAAC;EAAA;EAGjC,MAAMC,IAAA,GAAOA,CAAA,KAAM;IACLC,WAAA,CAAAH,QAAA,CAASJ,EAAA,CAAGK,KAAK,CAAC;EAAA;EAGhCG,SAAA,CAAU,MAAM;IACd,IAAIP,KAAA,CAAMN,SAAA,EAAW;MACbO,KAAA;IACR;EAAA,CACD;EAEM;IACLA,KAAA;IACAI;EAAA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}