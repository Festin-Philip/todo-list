{"ast":null,"code":"import { defineComponent, computed } from \"vue\";\nimport { V as VaIcon } from \"../va-icon/index-e46b09d5.mjs\";\nimport { u as useMessageListAria } from \"./hooks/useMessageListAria-7f67aad0.mjs\";\nimport { W as WithAttributes } from \"../../utils/with-attributes-7acc9479.mjs\";\nimport { u as useColors } from \"../../composables/useColors-b582f249.mjs\";\nconst _sfc_main = defineComponent({\n  name: \"VaMessageList\",\n  components: {\n    VaIcon,\n    WithAttributes\n  },\n  props: {\n    modelValue: {\n      type: [String, Array],\n      default: \"\"\n    },\n    limit: {\n      type: Number,\n      default: 1\n    },\n    color: {\n      type: String\n    },\n    hasError: {\n      type: Boolean,\n      default: false\n    }\n  },\n  inheritAttrs: false,\n  setup(props, {\n    slots\n  }) {\n    const {\n      getColor\n    } = useColors();\n    const {\n      childAttributes,\n      messageListAttributes\n    } = useMessageListAria(props);\n    return {\n      messageListAttributes,\n      childAttributes: computed(() => childAttributes.value),\n      messages: computed(() => {\n        if (!props.modelValue) {\n          return [];\n        }\n        if (!Array.isArray(props.modelValue)) {\n          return [props.modelValue];\n        }\n        return props.modelValue.slice(0, props.limit);\n      }),\n      computedStyle: computed(() => props.color ? {\n        color: getColor(props.color)\n      } : {})\n    };\n  }\n});\nexport { _sfc_main as _ };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","VaIcon","WithAttributes","props","modelValue","type","String","Array","default","limit","Number","color","hasError","Boolean","inheritAttrs","setup","slots","getColor","useColors","childAttributes","messageListAttributes","useMessageListAria","computed","value","messages","isArray","slice","computedStyle"],"sources":["../../../../../src/components/va-message-list/VaMessageList.vue"],"sourcesContent":["<template>\n  <WithAttributes>\n    <slot v-bind=\"{ ariaAttributes: childAttributes, messages }\" />\n  </WithAttributes>\n  <slot name=\"messages\" v-bind=\"{ ariaAttributes: messageListAttributes, messages }\">\n    <div\n      v-if=\"messages.length > 0\"\n      class=\"va-message-list\"\n      :style=\"computedStyle\"\n      v-bind=\"messageListAttributes\"\n    >\n      <ul class=\"va-message-list__list\">\n        <li\n          v-for=\"(message, index) in messages\"\n          :key=\"index\"\n          class=\"va-message-list__message\"\n        >\n          <slot name=\"message\" v-bind=\"{ messages, message }\">\n            <va-icon\n              v-if=\"hasError\"\n              class=\"va-message-list__icon\"\n              name=\"va-warning\"\n              :size=\"16\"\n            />{{ message }}\n          </slot>\n        </li>\n      </ul>\n    </div>\n  </slot>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType } from 'vue'\n\nimport { useColors } from '../../composables'\n\nimport { VaIcon } from '../va-icon'\nimport { useMessageListAria } from './hooks/useMessageListAria'\nimport { WithAttributes } from '../../utils/with-attributes'\n\nexport default defineComponent({\n  name: 'VaMessageList',\n\n  components: { VaIcon, WithAttributes },\n\n  props: {\n    modelValue: {\n      type: [String, Array] as PropType<string | string[]>,\n      default: '',\n    },\n    limit: { type: Number, default: 1 },\n    color: { type: String },\n    hasError: { type: Boolean, default: false },\n  },\n\n  inheritAttrs: false,\n\n  setup (props, { slots }) {\n    const { getColor } = useColors()\n\n    const { childAttributes, messageListAttributes } = useMessageListAria(props)\n\n    return {\n      messageListAttributes,\n      childAttributes: computed(() => childAttributes.value),\n      messages: computed<string[]>(() => {\n        if (!props.modelValue) { return [] }\n        if (!Array.isArray(props.modelValue)) { return [props.modelValue] }\n        return props.modelValue.slice(0, props.limit)\n      }),\n      computedStyle: computed(() => props.color ? { color: getColor(props.color) } : {}),\n    }\n  },\n})\n\n// va-message-list must have alert role, but ul must have list role. So there is .va-message-list__list\n// is also must have class which starts with .va- so typography styles will not be applied to it.\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-message-list {\n  color: var(--va-message-list-color);\n  list-style: none;\n\n  &__message {\n    display: flex;\n    align-items: center;\n    font-size: var(--va-message-list-font-size);\n    line-height: var(--va-message-list-line-height);\n  }\n\n  &__icon {\n    margin-right: var(--va-message-list-icon-margin-right);\n  }\n}\n</style>\n"],"mappings":";;;;;AAwCA,MAAAA,SAAA,GAAeC,eAAA,CAAgB;EAC7BC,IAAA,EAAM;EAENC,UAAA,EAAY;IAAEC,MAAA;IAAQC;EAAe;EAErCC,KAAA,EAAO;IACLC,UAAA,EAAY;MACVC,IAAA,EAAM,CAACC,MAAA,EAAQC,KAAK;MACpBC,OAAA,EAAS;IACX;IACAC,KAAA,EAAO;MAAEJ,IAAA,EAAMK,MAAA;MAAQF,OAAA,EAAS;IAAE;IAClCG,KAAA,EAAO;MAAEN,IAAA,EAAMC;IAAO;IACtBM,QAAA,EAAU;MAAEP,IAAA,EAAMQ,OAAA;MAASL,OAAA,EAAS;IAAM;EAC5C;EAEAM,YAAA,EAAc;EAEdC,MAAOZ,KAAA,EAAO;IAAEa;EAAA,GAAS;IACjB;MAAEC;IAAA,IAAaC,SAAA;IAErB,MAAM;MAAEC,eAAA;MAAiBC;IAAsB,IAAIC,kBAAA,CAAmBlB,KAAK;IAEpE;MACLiB,qBAAA;MACAD,eAAA,EAAiBG,QAAA,CAAS,MAAMH,eAAA,CAAgBI,KAAK;MACrDC,QAAA,EAAUF,QAAA,CAAmB,MAAM;QAC7B,KAACnB,KAAA,CAAMC,UAAA,EAAY;UAAE,OAAO;QAAG;QACnC,IAAI,CAACG,KAAA,CAAMkB,OAAA,CAAQtB,KAAA,CAAMC,UAAU,GAAG;UAAS,QAACD,KAAA,CAAMC,UAAU;QAAE;QAClE,OAAOD,KAAA,CAAMC,UAAA,CAAWsB,KAAA,CAAM,GAAGvB,KAAA,CAAMM,KAAK;MAAA,CAC7C;MACDkB,aAAA,EAAeL,QAAA,CAAS,MAAMnB,KAAA,CAAMQ,KAAA,GAAQ;QAAEA,KAAA,EAAOM,QAAA,CAASd,KAAA,CAAMQ,KAAK;MAAE,IAAI,EAAE;IAAA;EAErF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}