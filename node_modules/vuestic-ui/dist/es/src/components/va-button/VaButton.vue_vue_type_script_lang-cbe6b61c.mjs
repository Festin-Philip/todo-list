import { defineComponent, computed, toRefs, shallowRef } from "vue";
import { p as pick } from "../../../vendor-2b2dbafd.mjs";
import { u as useButtonBackground } from "./hooks/useButtonBackground-dd67c880.mjs";
import { u as useButtonAttributes } from "./hooks/useButtonAttributes-10d70e24.mjs";
import { u as useButtonTextColor } from "./hooks/useButtonTextColor-6ddce93a.mjs";
import { V as VaIcon } from "../va-icon/index-e46b09d5.mjs";
import { V as VaProgressCircle } from "../va-progress-circle/index-0fe38b09.mjs";
import { u as useHoverStyleProps } from "../../composables/useHoverStyle-ffca94ee.mjs";
import { u as usePressedStyleProps } from "../../composables/usePressedStyle-a932dfec.mjs";
import { u as useLoadingProps } from "../../composables/useLoading-5a447e96.mjs";
import { u as useRouterLinkProps, a as useRouterLink } from "../../composables/useRouterLink-59ed8410.mjs";
import { u as useFocus } from "../../composables/useFocus-1b4e6b2f.mjs";
import { u as useHover } from "../../composables/useHover-88d786c8.mjs";
import { u as usePressed } from "../../composables/usePressed-a334d24d.mjs";
import { u as useSlotPassed } from "../../composables/useSlotPassed-a0bcacbb.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { u as useSizeProps, a as useSize } from "../../composables/useSize-7540f7e4.mjs";
import { u as useColors } from "../../composables/useColors-b582f249.mjs";
import { u as useBem } from "../../composables/useBem-33d80128.mjs";
import { u as useTextColor } from "../../composables/useTextColor-48b60d5c.mjs";
const _sfc_main = defineComponent({
  name: "VaButton",
  components: { VaIcon, VaProgressCircle },
  props: {
    ...useComponentPresetProp,
    ...useSizeProps,
    ...useHoverStyleProps,
    ...usePressedStyleProps,
    ...useLoadingProps,
    ...useRouterLinkProps,
    tag: { type: String, default: "button" },
    type: { type: String, default: "button" },
    block: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    color: { type: String, default: "primary" },
    textColor: { type: String, default: "" },
    textOpacity: { type: Number, default: 1 },
    backgroundOpacity: { type: Number, default: 1 },
    borderColor: { type: String, default: "" },
    // only for filled bg state
    gradient: { type: Boolean, default: false },
    plain: { type: Boolean, default: false },
    round: { type: Boolean, default: false },
    size: {
      type: String,
      default: "medium",
      validator: (v) => ["small", "medium", "large"].includes(v)
    },
    icon: { type: String, default: "" },
    iconRight: { type: String, default: "" },
    iconColor: { type: String, default: "" }
  },
  setup(props) {
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const { sizeComputed } = useSize(props);
    const loaderSizeComputed = computed(() => {
      const size = /([0-9]*)(px)/.exec(sizeComputed.value);
      return size ? `${+size[1] / 2}${size[2]}` : sizeComputed.value;
    });
    const { tagComputed } = useRouterLink(props);
    const attributesComputed = useButtonAttributes(props);
    const { disabled } = toRefs(props);
    const button = shallowRef();
    const { focus, blur } = useFocus(button);
    const { isHovered } = useHover(button, disabled);
    const { isPressed } = usePressed(button);
    const iconColorComputed = computed(() => props.iconColor ? getColor(props.iconColor) : textColorComputed.value);
    const iconAttributesComputed = computed(() => ({
      color: iconColorComputed.value
    }));
    const wrapperClassComputed = computed(() => ({ "va-button__content--loading": props.loading }));
    const isSlotContentPassed = useSlotPassed();
    const isOneIcon = computed(() => !!(props.iconRight && !props.icon || !props.iconRight && props.icon));
    const isOnlyIcon = computed(() => !isSlotContentPassed.value && isOneIcon.value);
    const computedClass = useBem("va-button", () => ({
      ...pick(props, ["disabled", "block", "loading", "round", "plain"]),
      small: props.size === "small",
      normal: !props.size || props.size === "medium",
      large: props.size === "large",
      opacity: props.textOpacity < 1,
      bordered: !!props.borderColor,
      iconOnly: isOnlyIcon.value,
      leftIcon: !isOnlyIcon.value && !!props.icon && !props.iconRight,
      rightIcon: !isOnlyIcon.value && !props.icon && !!props.iconRight
    }));
    const isTransparentBg = computed(() => props.plain || props.backgroundOpacity < 0.5);
    const { textColorComputed } = useTextColor(colorComputed, isTransparentBg);
    const {
      backgroundColor,
      backgroundColorOpacity,
      backgroundMaskOpacity,
      backgroundMaskColor
    } = useButtonBackground(colorComputed, isPressed, isHovered);
    const contentColorComputed = useButtonTextColor(textColorComputed, colorComputed, isPressed, isHovered);
    const computedStyle = computed(() => ({
      borderColor: props.borderColor ? getColor(props.borderColor) : "transparent",
      ...contentColorComputed.value
    }));
    const publicMethods = { focus, blur };
    return {
      button,
      tagComputed,
      computedClass,
      computedStyle,
      textColorComputed,
      loaderSizeComputed,
      attributesComputed,
      wrapperClassComputed,
      iconAttributesComputed,
      backgroundColor,
      backgroundMaskColor,
      backgroundMaskOpacity,
      backgroundColorOpacity,
      ...publicMethods
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaButton.vue_vue_type_script_lang-cbe6b61c.mjs.map
