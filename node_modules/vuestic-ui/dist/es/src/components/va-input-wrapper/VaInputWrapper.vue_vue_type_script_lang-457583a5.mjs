import { defineComponent, computed } from "vue";
import { p as pick } from "../../../vendor-2b2dbafd.mjs";
import { V as VaInputLabel } from "./components/VaInputLabel-cf589fec.mjs";
import { V as VaIcon } from "../va-icon/index-e46b09d5.mjs";
import { u as useInputFieldAriaProps, a as useInputFieldAria } from "./hooks/useInputFieldAria-d9d14a85.mjs";
import { W as WithSlotInheritance } from "../../utils/with-slot-inheritance/with-slot-inheritance-0b6e7cab.mjs";
import { V as VaMessageList } from "../va-message-list/VaMessageList-7c63d284.mjs";
import { u as useFormFieldProps } from "../../composables/useFormField-3d39d61a.mjs";
import { u as useSyncProp } from "../../composables/useSyncProp-326abeda.mjs";
import { u as useFocusDeep } from "../../composables/useFocusDeep-c586baa6.mjs";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options-6b96d215.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { u as useValidationProps } from "../../composables/useValidation-d5e122b8.mjs";
import { u as useColors } from "../../composables/useColors-b582f249.mjs";
import { u as useBem } from "../../composables/useBem-33d80128.mjs";
import { u as useTextColor } from "../../composables/useTextColor-48b60d5c.mjs";
import { f as filterComponentProps } from "../../utils/component-options/filter-props-9727421a.mjs";
const VaInputLabelProps = extractComponentProps(VaInputLabel);
const _sfc_main = defineComponent({
  name: "VaInputWrapper",
  components: { VaMessageList: WithSlotInheritance(VaMessageList), VaIcon, VaInputLabel },
  props: {
    ...useComponentPresetProp,
    ...useInputFieldAriaProps,
    ...useFormFieldProps,
    ...useValidationProps,
    ...VaInputLabelProps,
    modelValue: { type: null, default: "" },
    counter: { type: Boolean },
    maxLength: { type: Number, default: void 0 },
    label: { type: String, default: "" },
    placeholder: { type: String, default: "" },
    color: { type: String, default: "primary" },
    background: { type: String },
    error: { type: Boolean, default: false },
    success: { type: Boolean, default: false },
    loading: { type: Boolean, default: false },
    requiredMark: { type: Boolean, default: false },
    innerLabel: { type: Boolean, default: false }
  },
  emits: [
    "click",
    "click-prepend",
    "click-append",
    "click-prepend-inner",
    "click-append-inner",
    "update:modelValue"
  ],
  setup(props, { emit, slots }) {
    const { getColor } = useColors();
    const [vModel] = useSyncProp("modelValue", props, emit, "");
    const isFocused = useFocusDeep();
    const counterValue = computed(
      () => props.counter && typeof vModel.value === "string" ? vModel.value.length : void 0
    );
    const wrapperClass = useBem("va-input-wrapper", () => ({
      ...pick(props, ["success", "error", "disabled", "readonly"]),
      focused: Boolean(isFocused.value),
      labeled: Boolean(props.label || slots.label),
      labeledInner: Boolean(props.label || slots.label) && props.innerLabel
    }));
    const colorComputed = computed(() => getColor(props.color));
    const backgroundComputed = computed(() => props.background ? getColor(props.background) : "#ffffff00");
    const messagesComputed = computed(() => props.error ? props.errorMessages : props.messages);
    const { textColorComputed } = useTextColor(backgroundComputed);
    const messagesColor = computed(() => {
      if (props.error) {
        return "danger";
      }
      if (props.success) {
        return "success";
      }
      return "";
    });
    const errorLimit = computed(() => props.error ? Number(props.errorCount) : 99);
    const isCounterVisible = computed(() => counterValue.value !== void 0);
    const counterComputed = computed(
      () => props.maxLength !== void 0 ? `${counterValue.value}/${props.maxLength}` : counterValue.value
    );
    return {
      ...useInputFieldAria(props),
      vModel,
      counterValue,
      vaInputLabelProps: filterComponentProps(VaInputLabelProps),
      wrapperClass,
      textColorComputed,
      isCounterVisible,
      counterComputed,
      colorComputed,
      backgroundComputed,
      messagesColor,
      messagesComputed,
      errorLimit
    };
  },
  methods: {
    focus() {
      this.$el.focus();
    },
    blur() {
      this.$el.blur();
    }
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaInputWrapper.vue_vue_type_script_lang-457583a5.mjs.map
