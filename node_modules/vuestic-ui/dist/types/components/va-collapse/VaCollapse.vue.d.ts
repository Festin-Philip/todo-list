declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    header: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: undefined;
    };
    bodyColor: {
        type: StringConstructor;
        default: undefined;
    };
    textColor: {
        type: StringConstructor;
        default: string;
    };
    iconColor: {
        type: StringConstructor;
        default: string;
    };
    colorAll: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    body: import("vue").ShallowRef<HTMLElement | undefined>;
    height: import("vue").ComputedRef<any>;
    iconColorComputed: import("vue").ComputedRef<string>;
    toggle: () => void;
    computedModelValue: import("vue").WritableComputedRef<boolean>;
    headerIdComputed: import("vue").ComputedRef<string>;
    headerAttributes: import("vue").ComputedRef<{
        id: string;
        tabindex: number;
        'aria-controls': string;
        'aria-expanded': boolean;
        'aria-disabled': boolean;
        role: string;
    }>;
    panelIdComputed: import("vue").ComputedRef<string>;
    tabIndexComputed: import("vue").ComputedRef<0 | -1>;
    textColorComputed: import("vue").ComputedRef<string>;
    computedClasses: {
        "va-collapse--inset": boolean;
        "va-collapse--popout": boolean;
        "va-collapse--disabled": boolean;
        "va-collapse--expanded": boolean;
        "va-collapse--active": boolean;
        "va-collapse--colored-body": boolean;
        "va-collapse--colored-header": boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            "va-collapse--inset": boolean;
            "va-collapse--popout": boolean;
            "va-collapse--disabled": boolean;
            "va-collapse--expanded": boolean;
            "va-collapse--active": boolean;
            "va-collapse--colored-body": boolean;
            "va-collapse--colored-header": boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<("va-collapse--inset" | "va-collapse--popout" | "va-collapse--disabled" | "va-collapse--expanded" | "va-collapse--active" | "va-collapse--colored-body" | "va-collapse--colored-header")[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    headerStyle: import("vue").ComputedRef<{
        color: string;
        backgroundColor: string;
    }>;
    contentStyle: import("vue").ComputedRef<{
        visibility: "visible" | "hidden";
        height: string;
        transitionDuration: string;
        background: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    header: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: undefined;
    };
    bodyColor: {
        type: StringConstructor;
        default: undefined;
    };
    textColor: {
        type: StringConstructor;
        default: string;
    };
    iconColor: {
        type: StringConstructor;
        default: string;
    };
    colorAll: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    modelValue: boolean;
    stateful: boolean;
    color: string;
    textColor: string;
    icon: string;
    disabled: boolean;
    iconColor: string;
    header: string;
    bodyColor: string;
    colorAll: boolean;
}>;
export default _default;
